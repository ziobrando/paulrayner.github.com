<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leading by Design</title>
    <description>Thinking about DDD, BDD, coding, software design and agile etc.</description>
    <link>http://thepaulrayner.com/</link>
    <atom:link href="http://thepaulrayner.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Apr 2015 22:24:57 +0000</pubDate>
    <lastBuildDate>Fri, 03 Apr 2015 22:24:57 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>BDD is a Centered Community Rather than a Bounded Community</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dan North mentioned at one point in the CukeUp 2015 panel yesterday the notion
in theology of a community being a &quot;bounded set.&quot; Since Tom Stuart had been
gracious enough to invite me to participate in the panel, towards the end of the
session I joined the panel so I could expand on Dan&amp;#8217;s comment. I pointed out
that the same theology also talks about the notion of a community being a
&quot;centered set.&quot; To me, this is what BDD really is: A centered set, rather than a
bounded set. In other words, &lt;em&gt;BDD is a centered community, rather than a bounded
community.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://skillsmatter.com/skillscasts/6174-wtf-is-bdd&quot;&gt;&lt;img src=&quot;/assets/what-is-bdd-panel2.png&quot; alt=&quot;BDD panel&quot; width=&quot;300&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I want to be clear what I meant by bounded vs. centered set as it applies to a
community when I proposed it in the CukeUp 2015 panel. These terms originated in
a theological context with the writings of anthropologist and missiologist Paul
Hiebert, in terms of what makes a person a Christian. I&amp;#8217;m going to quote and
adapt a significant amount of the content from his original article in what
follows to make it relevant for those without a background or interest in
theology. Before I do that though, first a little background is in order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cukeup-2015&quot;&gt;CukeUp 2015&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CukeUp 2015 conference at Skills Matter in London culminated yesterday in an
wonderful panel discussion about what BDD actually is, organized and facilitated
by Tom Stuart. I highly recommend anyone interested in current thinking in BDD watch
the video posted by Skills Matter at &lt;a href=&quot;https://skillsmatter.com/skillscasts/6174-wtf-is-bdd&quot; class=&quot;bare&quot;&gt;https://skillsmatter.com/skillscasts/6174-wtf-is-bdd&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/what-is-bdd-panel.png&quot; alt=&quot;What is BDD?&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seemed clear to me from the sentiments expressed in the session that focusing
on boundaries and exclusion is not what the BDD community has ever been about.
BDD is a community with values and principles at the center that promotes a
certain growing body of knowledge and cloud of practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there is no interest the BDD community in adopting a bounded set approach,
and staying static by &quot;locking down&quot; the body of knowledge or cloud of practices
that currently makes up BDD. Rather, the BDD community wants, and needs, to
continue challenging the status quo and incorporating new learning and practices
as they reveal themselves in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bounded-sets&quot;&gt;Bounded sets&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In his 1978 article&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
, Hiebert notes that many of our words refer to bounded sets:
&quot;apples,&quot; &quot;oranges,&quot; &quot;pencils,&quot; and &quot;pens,&quot; for instance. What is a bounded set?
How does our mind form it? In creating a bounded set our mind puts together
things that share some common characteristics. &quot;Apples,&quot; for example, are objects
that are &quot;the firm fleshy somewhat round fruit of a Rosaceous tree. They are
usually red, yellow or green and are eaten raw or cooked.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bounded sets have certain structural characteristics — that is, they force us to
look at things in a certain way. Let us use the category &quot;apples&quot; to illustrate
some of these:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The category is created by listing the essential characteristics that an
object must have to be within the set.&lt;/em&gt; For example, an apple is (1) a kind of
&quot;fruit&quot; that is (2) firm, (3) fleshy, (4) somewhat round, and so on. Any fruit
that meets these requirements (assuming we have an adequate definition) is an
&quot;apple.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The category is defined by a clear boundary.&lt;/em&gt; A fruit is either an apple or it
is not. It cannot be 70% apple and 30% pear. Most of the effort in defining the
category is spent on defining and maintaining the boundary. In other words, not
only must we say what an &quot;apple&quot; is, we must also clearly differentiate it from
&quot;oranges,&quot; &quot;pears,&quot; and other similar objects that are &lt;em&gt;not&lt;/em&gt; &quot;apples.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Objects within a bounded set are uniform in their essential characteristics.&lt;/em&gt;
All apples are 100% apple. One is not more apple than another. Either a fruit is
an apple or it is not. There may be different sizes, shapes, and varieties, but
they are all the same in that they are all apples. There is no variation
implicit within the structuring of the category.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Bounded sets are static sets.&lt;/em&gt; If a fruit is an apple, it remains an apple
whether it is green, ripe, or rotten. The only change occurs when an apple
ceases to be an apple (e.g., being eaten), or when something like an orange is
turned into an apple (something we cannot do). The big question, therefore, is
whether an object is inside or outside the category. Once it is within, there
can be no change in its categorical status.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-if-bdd-was-a-bounded-set&quot;&gt;What if BDD was a Bounded Set?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happens to our concept of &quot;BDD&quot; if we define it in terms of a bounded set?
If we use the above characteristics of a bounded set we probably come up with
something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;We would define &quot;BDD&quot; in terms of a set of essential or definitive
characteristics.&lt;/em&gt; These characteristics, such as perhaps collaborative
specification by example, test-first automation, feature injection,
red-green-refactor (TDD), would be non-negotiable for people doing BDD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;We would make a clear distinction between what is &quot;BDD&quot; and what is not.&lt;/em&gt;
There is no place in between. Moreover, maintaining this boundary would be critical to
the maintenance of the category of BDD. Therefore it would be essential we determine who
is doing BDD and who is not, and to keep the two sharply differentiated. We would want
to make sure to include those who
are truly doing BDD and to exclude from the community those who claim to be but are
not. If BDD was to be a bounded set, to have an unclear boundary would be to undermine the very concept of BDD
itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;We would view all &quot;BDD practitioners&quot; as essentially the same.&lt;/em&gt; There would be
experienced BDD practitioners and beginners, but all are doing BDD, since they are
within the boundary. Homogeneity within the community in terms of belief and practices
would be the norm and the goal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we think of BDD as a bounded set, we must decide what are the definitive
characteristics that set a BDD practitioner apart from a non-BDD practitioner.
We may do so in terms of belief in certain essential &quot;truths&quot; about BDD, or
strict adherence to certain essential BDD &quot;practices.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BDD, as understood by leaders within the community, is clearly NOT a bounded
set. Rather, it is a centered set. Let&amp;#8217;s see what we mean by that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;centered-sets&quot;&gt;Centered Sets&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are other ways to form mental categories. Hiebert says a second way is to
form centered sets&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;. A centered set has the following characteristics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It is created by defining a center, and the relationship of things to that center.&lt;/em&gt;
Some things may be far from the center, but they are moving towards the
center, therefore, they are part of the centered set. On the other hand, some
objects may be near the center but are moving away from it, so they are not a
part of the set. The set is made up of all objects moving towards the center.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;While the centered set does not place the primary focus on the boundary,
there is a clear division between things moving in and those moving out.&lt;/em&gt; An
object either belongs to a set or it does not. The set focuses upon the center
and the boundary emerges when the center and the movement of the objects has
been defined. There is no great need to maintain the boundary in order to
maintain the set. The boundary is not the focus so long as the center is clear.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Centered sets reflect variation within a category.&lt;/em&gt; While there is a clear
distinction between things moving in and those moving out, the objects within
the set are not categorically uniform. Some may be near the center and others
far from it, even though all are moving towards the center. Each object must be
considered individually. It is not reduced to a single common uniformity within
the category.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Centered sets are dynamic sets.&lt;/em&gt; Two types of movements are essential parts of
their structure. First, it is possible to change direction — to turn from moving
away to moving towards the center, from being outside to being inside the set.
Second, because all objects are seen in constant motion, they are moving, fast
or slowly, towards or away from the center. Something is always happening to an
object. It is never static.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/centered-set.png&quot; alt=&quot;Centered Set&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Illustrations of centered sets are harder to come by in English, since English tends
to see the world largely in terms of bounded sets. One example is a magnetic field
in which particles are in motion. Electrons are those particles which are drawn
towards the positive magnetic pole, and protons are those attracted by the negative
pole. The diagram here is another way of visualizing a centered set&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bdd-as-a-centered-set&quot;&gt;BDD as a Centered Set&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In contrast to a bounded set, how does the concept &quot;BDD&quot; look defined as a
centered set as I propose?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;A BDD practitioner is be defined in terms of the center — in terms of the
principles, values and goals that the BDD community holds to be central&lt;/em&gt;. These
principles, values and goals were enumerated quite clearly by Dan North and
others during the panel session and are spelled out in other places (Dan&amp;#8217;s original
article about BDD in Better Software was published in 2006 and still applies today). From the
nature of the centered set, it should be clear that it is possible that there
are those near the center who know a great deal about BDD, but who are moving
away from the center. On the other hand there are those who are at a distance —
who know little about BDD because they are just starting to learn it — but they
are still BDD practitioners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;There is a clear division between being doing BDD and not doing BDD.&lt;/em&gt;
The boundary is there. To pick an extreme example, I mentioned on the panel that a team doing waterfall
(serial lifecycle phase gate) development with no collaboration between roles, not
using examples, and doing no test automation at all could not be said to be doing BDD.
But with a centered set there is less stress on maintaining the
boundary in order to preserve the existence and purity of the category, the BDD
community. There is also no need to play boundary games and institutionally
exclude those who are not truly part of the BDD community. Rather, the focus is on the center
and of pointing people to that center. Inclusion, rather than exclusion, is
the name of the BDD game.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;There is a recognition of variation among the BDD community.&lt;/em&gt; Some are
closer to the BDD values in their knowledge and practice, others have only a
little knowledge and need to grow. But - whether novice or expert or somewhere
in between - all are doing BDD, and are called to continuously seek to
improve and grow in their understanding and practice of delivering value early
and often.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being a centered set, growth thus is an essential part of practicing BDD. When a
team begins doing BDD, they begin a journey and should strive to continue to
move towards the center. There is no static state. Learning BDD is not the end,
it is the beginning. We need good BDD education, mentoring and coaching to teach
BDD to the many beginners who will join the community in the years to come, but
we must also think about the need to continously improve and inspire novices to
move beyond following recipes and so-called &quot;best practices&quot; and experiment with
tailoring BDD to their unique context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I submit that the agile community in general should also be considered a
centered set, with the agile manifesto as the central value statement for the
movement. Whether BDD, or agile in general, being a centered community rather
than a bounded one must involve always seeking to not only uphold but also
increase the gravitational pull of the values at the center.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Paul Hiebert, &quot;Conversion, Culture and Cognitive Categories.&quot; In: Gospel in Context 1:4 (October, 1978), 24-29., sourced from &lt;a href=&quot;https://danutm.files.wordpress.com/2010/06/hiebert-paul-g-conversion-culture-and-cognitive-categories.pdf&quot; class=&quot;bare&quot;&gt;https://danutm.files.wordpress.com/2010/06/hiebert-paul-g-conversion-culture-and-cognitive-categories.pdf&lt;/a&gt;, 3/28/2015
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; There are also Fuzzy Sets, see Hiebert&amp;#8217;s article for more references
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; Sourced from &lt;a href=&quot;http://www.academia.edu/6810466/Understanding_Christian_Identity_in_Terms_of_Bounded_and_Centered_Set_Theory_in_the_Writings_of_Paul_G._Hiebert&quot; class=&quot;bare&quot;&gt;http://www.academia.edu/6810466/Understanding_Christian_Identity_in_Terms_of_Bounded_and_Centered_Set_Theory_in_the_Writings_of_Paul_G._Hiebert&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 28 Mar 2015 23:18:00 +0000</pubDate>
        <link>http://thepaulrayner.com/bdd-is-a-centered-rather-than-a-bounded-community</link>
        <guid isPermaLink="true">http://thepaulrayner.com/bdd-is-a-centered-rather-than-a-bounded-community</guid>
        
        <category>BDD</category>
        
        
      </item>
    
      <item>
        <title>Good Design is People-Centered - Design Quotes Part 5</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;A design isn&amp;#8217;t finished until somebody is using it.&quot;&gt;&lt;/span&gt;These quotes are about the goal of design, which is centered around meeting the needs of real people. What other quotes on people-centered design am I missing?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design is about making things good (and then better) and right (and fantastic) for the people who use and encounter them.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Matt Beale
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I never design a building before I&amp;#8217;ve seen the site and met the people who will be using it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Frank Lloyd Wright
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only important thing about design is how it relates to people.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Victor Papanek
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A design isn&amp;#8217;t finished until somebody is using it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Brenda Laurel
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 09 Feb 2015 12:01:00 +0000</pubDate>
        <link>http://thepaulrayner.com/good-design-is-people-centered-design-quotes-part-5</link>
        <guid isPermaLink="true">http://thepaulrayner.com/good-design-is-people-centered-design-quotes-part-5</guid>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Design is Difficult - Design Quotes Part 4</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;No, Watson, this was not done by accident, but by design.&quot;&gt;&lt;/span&gt;These quotes are about the difficulty of good design. What other quotes on the challenges of doing good design am I missing?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;it&amp;#8217;s very easy to be different, but very difficult to be better.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jonathan Ive
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve probably designed 4,000 products at IDEO over my career, and for every one of them I&amp;#8217;d like to send a little note with it that says, &quot;I&amp;#8217;m sorry that it&amp;#8217;s in this present state. Given what I know now, if I could start over again it would be a lot better.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; David Kelley
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design is easy. All you do is stare at the screen until drops of blood form on your forehead.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Marty Nuemeier - paraphrasing Gene Fowler
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ease of use and ease of learning are not the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Katherine Haramundanis
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Computer design is often bad design done on a computer.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mike Hicks
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our opportunity, as designers, is to learn how to handle the complexity, rather than shy away from it, and to realize that the big art of design is to make complicated things simple.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Tim Parsey
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discovery consists of seeing what everybody has seen and thinking what nobody has thought.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Albert Von Szent-Gyorgy
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No, Watson, this was not done by accident, but by design.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Sherlock Holmes - Sir Arthur Conan Doyle
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 06 Feb 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/design-is-difficult-design-quotes-part-4</link>
        <guid isPermaLink="true">http://thepaulrayner.com/design-is-difficult-design-quotes-part-4</guid>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Why Design? - Design Quotes Part 3</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Good design is good business.&quot;&gt;&lt;/span&gt;These quotes are about the &lt;em&gt;purpose&lt;/em&gt; of design. What other quotes on the &lt;em&gt;utility&lt;/em&gt; of design am I missing?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you think it&amp;#8217;s expensive to hire a professional to do the job, wait until you hire an amateur.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Red Adair
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good design is good business.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Thomas J. Watson Jr.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design must reflect the practical and aesthetic in business but above all&amp;#8230;&amp;#8203; good design must primarily serve people.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Thomas J. Watson
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Questions about whether design is necessary or affordable are quite beside the point: design is inevitable. The alternative to good design is bad design, not no design at all. Everyone makes design decisions all the time without realizing it—like Moliere&amp;#8217;s M. Jourdain who discovered he had been speaking prose all his life—and good design is simply the result of making these decisions consciously, at the right stage, and in consultation with others as the need arises.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Douglas Martin
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good design is not the one that correctly predicts the future, it&amp;#8217;s one that makes adapting to the future affordable.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Venkat Subramaniam
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everyone designs who devises courses of action aimed at changing existing situations into preferred ones.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Herbert Simon
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 05 Feb 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/why-design-design-quotes-part-3</link>
        <guid isPermaLink="true">http://thepaulrayner.com/why-design-design-quotes-part-3</guid>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>The Design Process - Design Quotes Part 2</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;When you specify something to be designed, tell what properties you need, not how they are to be achieved.&quot;&gt;&lt;/span&gt;These quotes are about the process of design. What other quotes on design as process am I missing?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perfection is not reached when there is nothing to be added anymore, but when there is nothing to be left out anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Antoine De Saint-Exupery
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The design process, at its best, integrates the aspirations of art, science, and culture.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jeff Smith
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everyone is a lot of people to design for.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Joshua Rose
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To say that something is designed means it has intentions that go beyond its function. Otherwise it&amp;#8217;s just planning.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Ayse Birsel
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good design defuses the tension between functional and aesthetic goals precisely because it works within the boundaries defined by the functional requirements of the communication problem. Unlike the fine arts, which exists for their own sake, design must always solve a particular real-world problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Kevin Mullet and Darrell Sano
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In practice, designing seems to proceed by oscillating between sub-solution and sub-problem areas, as well as by decomposing the problem and combining sub-solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Fred Brooks&lt;br&gt;
&lt;cite&gt;The Design of Design&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you specify something to be designed, tell what properties you need, not how they are to be achieved.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Fred Brooks&lt;br&gt;
&lt;cite&gt;The Design of Design&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is to hold “process” off long enough to permit great design to occur, so that the lesser issues can be debated once the great design is on the table—rather than smothering it in the cradle.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Fred Brooks&lt;br&gt;
&lt;cite&gt;The Design of Design&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 04 Feb 2015 12:01:00 +0000</pubDate>
        <link>http://thepaulrayner.com/the-design-process-design-quotes-part-2</link>
        <guid isPermaLink="true">http://thepaulrayner.com/the-design-process-design-quotes-part-2</guid>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>What is Design? - Design Quotes Part 1</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Design is intelligence made visible.&quot;&gt;&lt;/span&gt;I&amp;#8217;m collecting helpful quotes about the nature and importance of design. This is part one in a series of pages of quotes about different aspects of design. Many of the quotes I&amp;#8217;ve sourced are about design in general, but also apply well to software design in all its many forms. What other quotes on the &lt;em&gt;nature&lt;/em&gt; of design am I missing?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design is not just what it looks like and feels like. Design is how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Steve Jobs
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;People think that design is styling. Design is not style. It&amp;#8217;s not about giving shape to the shell and not giving a damn about the guts. Good design is a renaissance attitude that combines technology, cognitive science, human need, and beauty to produce something that the world didn&amp;#8217;t know it was missing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Paola Antonelli
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good design is a lot like clear thinking made visual.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Edward Tufte
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design is intelligence made visible.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Don Newgren
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[Design is] a plan for arranging elements in such a way as to best accomplish a particular purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Charles Eames
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is design? It&amp;#8217;s where you stand with a foot in two worlds - the world of technology and the world of people and human purposes - and you try to bring the two together.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mitchell Kapor
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design isn’t just to satisfy requirements, but also to uncover requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Fred Brooks&lt;br&gt;
&lt;cite&gt;The Design of Design&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 03 Feb 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/what-is-design-design-quotes-part-1</link>
        <guid isPermaLink="true">http://thepaulrayner.com/what-is-design-design-quotes-part-1</guid>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Don&#39;t Give Your Customers What They Ask For</title>
        <description>&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://arcweb.archives.gov/arc/action/ExternalIdSearch?id=594412&quot;&gt;&lt;img src=&quot;/assets/flying_machine_patent.jpg&quot; alt=&quot;Patent Drawing for a Flying Machine&quot; width=&quot;300&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Give them what they need.&lt;/em&gt;&lt;/strong&gt; There is a pairing exercise participants experience in my BDD with Cucumber workshops, where one person describes a commonplace activity to the other. The challenge is describing it &lt;em&gt;without&lt;/em&gt; being able to use certain common words. One thing I have noticed, no matter where I have run this exercise, is that very few people actually explain &lt;em&gt;why&lt;/em&gt; this activity should even be done. They typically spend all the time describing the mechanics of how to do it, but don&amp;#8217;t explain why, and the listener usually doesn&amp;#8217;t think to ask. I contend that as technologists we do the same thing to our customers all the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The critical piece here is asking &quot;why?&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the class exercise, if the person explaining the activity had started with why, the rest of the description would have been so much clearer and fallen into place quicker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For us, we need to ask our customers, &quot;why do you need this?&quot; &quot;How will it help you?&quot; &quot;What problem does having this capability or feature solve?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;And then ask &quot;why?&quot; a few more times.&lt;/strong&gt; Not in an annoying way like a small child does, but as a genuine drive to deeper learning and empathy.&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Listen to your customers, but don’t let them tell you what to do.&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Failure to do this will lead to a mechanical understanding of the need rather than the type of creative collaboration that might lead to deep insights about the true problem being addressed. I think it is this lack of deeper questioning that explains how many user stories lack a clear statement of the benefit returned by implementing the feature described by the story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year.html&quot;&gt;Ten Lessons from GitHub’s First Year&lt;/a&gt;, Tom Preston-Werner writes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Adapt to Your Customers&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a seemingly paradoxical piece of advice for you: Listen to your customers, but don’t let them tell you what to do. Let me explain. Consider a feature request such as “GitHub should let me FTP up a documentation site for my project.” What this customer is really trying to say is “I want a simple way to publish content related to my project,” but they’re used to what’s already out there, and so they pose the request in terms that are familiar to them. We could have implemented some horrible FTP based solution as requested, but we looked deeper into the underlying question and now we allow you to publish content by simply pushing a Git repository to your account. This meets requirements of both functionality and elegance.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Tom Preston-Werner&lt;br&gt;
&lt;cite&gt;Ten Lessons from GitHub&#39;s First Year&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;Readme Driven Development&lt;/a&gt; Tom points out how &quot;building the right system&quot; always trumps &quot;building the system right&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hear a lot of talk these days about TDD and BDD and Extreme Programming and SCRUM and stand up meetings and all kinds of methodologies and techniques for developing better software, but it&amp;#8217;s all irrelevant unless the software we&amp;#8217;re building meets the needs of those that are using it. Let me put that another way. A perfect implementation of the wrong specification is worthless.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Tom Preston-Werner&lt;br&gt;
&lt;cite&gt;Readme Driven Development&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Producing working software frequently is necessary but insufficient. Producing valuable working software frequently is what matters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Note: I posted an early version of this articule on my company blog on 21 July 2011, but am reposting it here.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Flying Machine Patent from US National Archives. Patent Drawing for a Flying Machine, 10/05/1869. Creator(s): Department of Commerce. Patent Office. (1925 - 1975).&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 02 Feb 2015 14:50:00 +0000</pubDate>
        <link>http://thepaulrayner.com/dont-give-your-customers-what-they-ask-for</link>
        <guid isPermaLink="true">http://thepaulrayner.com/dont-give-your-customers-what-they-ask-for</guid>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>LeanUX - My Notes</title>
        <description>&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/lean-ux.jpg&quot; alt=&quot;Lean UX&quot; width=&quot;100&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lean UX: Applying Lean Principles to Improve User Experience by Gothelf &amp;amp; Seiden comes in at just over 100 pages, so it&amp;#8217;s a quick read. But it&amp;#8217;s full of very practical guidance for how to apply lean principles to user experience design (UXD). Published in 2013, it won a Jolt Award. Here I captured quotes and notes I thought were interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If anything below looks interesting to you, run - don&amp;#8217;t walk - and &lt;a href=&quot;http://www.amazon.com/Lean-UX-Applying-Principles-Experience/dp/1449311652/&quot;&gt;buy Lean UX&lt;/a&gt;. It&amp;#8217;s &lt;em&gt;that&lt;/em&gt; good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a couple of quotes from Eric Ries in the forward that I thought were great:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
The problem is the systems we use to build companies. We are still building linear organizations in a world that demands constant change. We are still building silos in a world that demands thorough collaboration.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Eric Ries&lt;br&gt;
&lt;cite&gt;from the forward, p. xi&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve never heard the phrase &quot;linear organizations&quot; before, but it&amp;#8217;s a great way to describe the kind of siloing I see every day in the organizations I coach in agile. Two types of siloing are especially prelevant. One is specialty-based, the other software architecture/component-based. Many organizations have both kinds of silos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specialty-based organizations are structured around the roles people play in a serial, &quot;gated&quot;, &quot;waterfall&quot; software development lifecycle. That is, there are UX designers for the design phase, architects for architecture in the design phase, BAs for analysis in the analysis phase, developers for the construction phase, testers for the QA phase, operations staff for the deployment phase, and so on. Each phase is gated based on the delivery of documentation, and a review of that documentation. Basically, such a process treats the entire deliverable as a single batch of work, it&amp;#8217;s the opposite of the 4 values in the agile manifesto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&amp;#8230;&amp;#8203;We are still investing in analysis, arguing over specifications, and efficiently producing deliverables in a world that demands continuous experimentation to achieve continuous innovation.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Eric Ries&lt;br&gt;
&lt;cite&gt;from the forward, p. xi&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conway&amp;#8217;s Law is commonly expressed as organizations structured around component-based teams, where the organizational structure matches the architecture of the software. Feature-based cross-functional teams organized around customer outcomes are how agile typically tries to &quot;hack&quot; Conway&amp;#8217;s Law by maintaining software boundaries but incorporating all the people needed across the system architecture to ship a customer feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&amp;#8230;&amp;#8203;heed Jeff Gothelf&amp;#8217;s call to &#39;get out of the deliverables business&#39; and return our focus where it belongs, enlisting the whole corporation in its most urgent task: delighting customers.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Eric Ries&lt;br&gt;
&lt;cite&gt;from the forward, p. xi&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is something I have thought about a lot when it comes to doing BDD well. Team members need to willing to make getting early feedback a priority, instead of only showing things to others when they are &quot;done&quot;. Early feedback is best.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
As I&amp;#8217;ve learned to practice Lean UX, I&amp;#8217;ve had to overcome the feeling that I was showing work that was &quot;ugly,&quot; &quot;unfinished,&quot; or &quot;not ready.&quot; Working this way requires the support of a high-functioning team. You need to know - as a team - that you&amp;#8217;re not going to get it right the first time and that you&amp;#8217;re all working together to iterate your way forward.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. xv
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;section-1-introduction-and-principles&quot;&gt;Section 1 : Introduction and Principles&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My quick and dirty sketch of the 3 foundations of Lean UX:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/lean_ux_sketch.jpg&quot; alt=&quot;LeanUX - 3 Foundations&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The thing above &quot;Focus&quot; in the drawing on the right is supposed to be an eye looking through a magnifying glass. Oh, the horror of my lack of drawing skills!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 3 foundations of Lean UX are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Design Thinking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile software development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lean Startup method&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The principles of Lean UX are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cross-functional teams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small, dedicated, colocated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Progress = Outcomes, not output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Problem-focused teams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing waste&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small batch size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous discovery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GOOB: The new user-centricity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shared understanding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anti-pattern: Rockstars, gurus, and ninjas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Externalizing your work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making over analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learning over growth&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permission to fail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting out of the deliverables business&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cross-functional-teams&quot;&gt;Cross-functional Teams&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collapse the gated-handoff process known as &lt;em&gt;waterfall&lt;/em&gt;. Early insights from all relevant disciplines, and increased team efficiency results from encouraging conversations across functional silos.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;small-dedicated-colocated&quot;&gt;Small, Dedicated, Colocated&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No more than 10 core people: benefit is increased communication, focus, comaraderie.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;progress-outcomes-not-output&quot;&gt;Progress = Outcomes, not Output&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Focus on achieving explicity defined business goals over delivering features and providing services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;problem-focused-teams&quot;&gt;Problem-focused teams&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assign a team a business problem to solve, as opposed to a set of features to implement. Trust teams to arrive at their own solutions, driving deeper sense of pride and ownership.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;removing-waste&quot;&gt;Removing waste&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eliminating anything from the team process that doesn&amp;#8217;t contribute to improving outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;small-batch-size&quot;&gt;Small batch size&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Creating only the design that is necessary to move the team forward and avoiding a big &#39;inventory&#39; of untested and unimplemented design ideas.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 9
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;continuous-discovery&quot;&gt;Continuous discovery&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ongoing, whole-team research process of engaging the customer during the design and development process, through regularly scheduled activities, using both quantitive and qualitative methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Goal: understand what the users are doing with your products and why they are doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;goob-the-new-user-centricity&quot;&gt;GOOB: The new user-centricity&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
GOOB: Getting out of the building.&quot; &quot;Ultimately, the success or failure of your product isn&amp;#8217;t the team&amp;#8217;s decision - it&amp;#8217;s the customers&#39;&amp;#8230;&amp;#8203;the sooner you give them a voice, the sooner you&amp;#8217;ll learn whether you&amp;#8217;ve got an idea that&amp;#8217;s ready to be built.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 9
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;shared-understanding&quot;&gt;Shared understanding&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Shared understanding is the currency of Lean UX.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 10
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;anti-pattern-rockstars-gurus-and-ninjas&quot;&gt;Anti-pattern: Rockstars, gurus, and ninjas&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Team cohesion breaks down when you add individuals with large egos who are determined to stand out and be stars.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 10
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;externalizing-your-work&quot;&gt;Externalizing your work&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Externalizing means getting your work out of your head and out of your computer and into public view&amp;#8230;&amp;#8203;on to the wall, allowing everyone to see where the team stands. It creates a passive, ambient flow of information across the team&amp;#8230;&amp;#8203;. It allows all the members of the team - even the quiet ones - to participate in information-sharing activities.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 10
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;making-over-analysis&quot;&gt;Making over analysis&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
There is more value in creating the first version of an idea than spending half a day debating its merits in a conference room.&quot; &quot;&amp;#8230;&amp;#8203;make the ideas concrete - you need to make something for people to respond to. Debating ideas is waste. Instead of analyzing potential scenarios, make something and get out of the building with it.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 11
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;learning-over-growth&quot;&gt;Learning over growth&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Ensuring that an idea is right before scaling it out mitigates the risk inherent in broad feature deployment.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 11
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;permission-to-fail&quot;&gt;Permission to fail&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Teams need to learn to &lt;strong&gt;experiment&lt;/strong&gt; with ideas in order to find the best solutions to business problems. This requires a safe environment to take risks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;technical - they can push out ideas in a safe way&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cultural - they won&amp;#8217;t be penalized for trying ideas that don&amp;#8217;t succeed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Permission to fail breeds a culture of experimentation. Experimentation breeds creativity. Creativity, in turn, yields innovative solutions.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 11
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Frequent failure leads to increased mastery of skills&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a video called &quot;Why You Need to Fail&quot; (&lt;a href=&quot;http://www.youtube.com/watch?v=HhxcFGuKOys&quot; class=&quot;bare&quot;&gt;http://www.youtube.com/watch?v=HhxcFGuKOys&lt;/a&gt;), CD Baby founder Derek Sivers describes the surprising results of a ceramics class. On the first day, the instructor announced to his class that the students would be divided into two groups. Half of the students would need to make only one clay pot each during the semester. Their grades would depend on the perfection of that solitary pot. The other half of the class would be graded simply by the weight of the pots they made during the semester. If they made 50 pounds of pots or more, they&amp;#8217;d get an A. Forty pounds would earn a B; 30 pounds, a C; and so on. WHat they actuall made was irrelevant. The istructor said he wouldn&amp;#8217;t even look at the pots. He would bring his bathroom scale to the final day of class and weigh each student&amp;#8217;s work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of the semester, an interesting thing had occurred. Outside observers of the class notes that the highest-quality pots had been made by the &quot;quantity group.&quot; They had spent the entire semester working as quickly as they could to make pots. Sometimes they succeeded, and sometimes they failed. With each iteration, each experiment, they learned. From their learning, they became better able to achieve the end goal: making high-quality clay pots.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By contrast, the group that made one object didn&amp;#8217;t have the benefit of those failed iterations and didn&amp;#8217;t learn as quickly enough to perform at the same level as the &quot;quantity group.&quot; They had spent their semester theorizing about what would make a &quot;grade-A&quot; pot but didn&amp;#8217;t have the experience to execute that grandiose vision.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;section-2-process&quot;&gt;Section 2 : Process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
This is the day-to-day rhythm of Lean UX: a team working collaboratively, iteratively, and in parallel, with few handoffs, minimal deliverables, and a focus on working software and market feedback.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 16
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Our goal is not to create a deliverable, it&amp;#8217;s to change something in the world - to create an outcome. We start with assumptions instead of requirements. We create and test hypotheses. We measure to see we&amp;#8217;ve achieved our desired outcomes.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 17
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hypothesis-statement&quot;&gt;Hypothesis Statement&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Composed of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Assumptions - high-level declaration of what we believe to be true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hypotheses - more granular descriptions of our assumptions that target specific areas of our product or workflow for experimentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outcomes - the signal we seek from the market to help us validate or invalidate our hypotheses. These are often quantitative but can also be qualitative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personas - Models of the people for whom we believe we are solving a problem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Features - the product changes or improvements we believe will drive the outcomes we seek&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;declaring-assumptions&quot;&gt;Declaring assumptions&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A group exercise, include all team members and relevant subject matter experts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;May need to prepare in advance things like:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analytics reports showing how current product is being used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usability reports that illustrate why customers are taking certain actions in your product&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Information about past attempts to fix this issue and their successes and failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis from the business stakeholder about how solving this problem will affect the company&amp;#8217;s performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Competitive analysis that show how competitors are tackling the same issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;problem-statement&quot;&gt;Problem statement&lt;/h5&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gives team a clear focus&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defines any important constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Made up of 3 elements:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Current system goals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Problem the business stakeholder wants addressed (i.e. where the goals aren&amp;#8217;t being met)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicit request for improvement that doesn&amp;#8217;t dictate a specific solution&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;[&lt;strong&gt;Our service/product&lt;/strong&gt;] was designed to achieve [&lt;strong&gt;these goals&lt;/strong&gt;]. We have observed that the product/service isn&amp;#8217;t meeting [&lt;strong&gt;these goals&lt;/strong&gt;], which is causing [&lt;strong&gt;this adverse effect&lt;/strong&gt;] to our business. How might we improve [&lt;strong&gt;service/product&lt;/strong&gt;] so that our customers are more successful based on [&lt;strong&gt;these measurable criteria&lt;/strong&gt;]?&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/business_assumptions_worksheet.jpg&quot; alt=&quot;Business Assumptions Worksheet&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declare assumptions at the start so we can identify project risks. Figure out which assumptions are the riskiest and work on them first. Prioritize according to High Risk and High Unknown.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;hypotheses&quot;&gt;Hypotheses&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We believe that
[&lt;strong&gt;doing this/building this feature/creating this experience&lt;/strong&gt;]
for [&lt;strong&gt;these people/personas&lt;/strong&gt;]
will achieve [&lt;strong&gt;this outcome&lt;/strong&gt;].
We will know this is true when we see [&lt;strong&gt;this market feedback, quantitative measure, or qualitative insight&lt;/strong&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;outcomes&quot;&gt;Outcomes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Break high-level outcomes down into specific ones where possible. Reach consensus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;personas&quot;&gt;Personas&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Four key elements to proto-persona:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Sketch and name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Behavioral demographic information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pain points and needs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential solutions&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;treat persona elements as another hypothesis to validate and iterate on them.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Too often, our design process starts when someone has a feature idea, and we end up working backward to try to justify the feature. In Lean UX, features exist to serve the needs of the business, the customer, and the user.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chapter-4-collaborative-design&quot;&gt;Chapter 4 - Collaborative Design&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Love this quote:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you navigate through the rest of your life, be open to collaboration. Other people and other people&amp;#8217;s ideas are often better than your own. Find a group of people who challenge and inspire you, spend a lot of time with them, and it will change your life.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Amy Poehler&lt;br&gt;
&lt;cite&gt;p. 33&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Teams rarely learn or get better from working with heroes. Instead, &lt;strong&gt;designing together increases the design IQ of the entire team.&lt;/strong&gt; It allows every memeber of the team to articulate his or her ideas. It gives designers a broader set of ideas to draw upon as they refine the user experence. This collaboration, in turn, breeds incleased feelings of ownership over the work being done by the entire team. Finally, collaborative design builds team-wide shared understanding. It is this shared understadning that is the currency of Learn UX. The more the team colectively understands, the less it has to document in order to move forward.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 34
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collaborative design&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Still a designer-led activity (designer calls and facilitates design meetings)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key point: collaborate with a diverse group of team members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;design session output is &lt;em&gt;low-fidelity sketches and wireframes&lt;/em&gt; &amp;#8594; critical to maintaining malleability of the work!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel paths for software development and design are the fastest route to an actual experience&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conversations &amp;#8594; Designer/developer collaboration &amp;#8594; Transparency (process &amp;amp; progress) &amp;#8594; Bonds of trust &amp;#8594; Rising motivation to work together &amp;#8594; Higher quality work&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;design-studio&quot;&gt;Design Studio&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Problem definition and constraints (15-45 mins)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Individual idea generation - &lt;em&gt;can use 6-up sheets&lt;/em&gt; (diverge) (10 mins)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presentation and critique - &lt;em&gt;critique focuses on clarifying presenters intentions&lt;/em&gt; (3 mins per person)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate and refine - &lt;em&gt;individual refines thinking for one idea based on critique&lt;/em&gt; (emerge) (5-10 mins)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Team idea generation - &lt;em&gt;drive to consensus through prioritizing &amp;amp; paring back features, use a parking lot for features that don&amp;#8217;t make the cut&lt;/em&gt; (converge) (45 mins)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;style-guide&quot;&gt;Style Guide&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also known as pattern library, is a living collection of all your product&amp;#8217;s customer-facing components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;If it&amp;#8217;s made of pixels, it goes in the style guide&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Printed, wiki, or &quot;live&quot; (repositories of front-end code &amp;amp; design that not only define how the product looks and behaves, but actually function as the underlying markup and stylesheets for that experience)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create efficiency&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide a repository of ready-to-go, approved interface elements that can be assembled and aligned to form a workflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minimize debate over mundane elements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assets are already designed, defined, and collected in one place&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benefits to interaction and visual designers&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No longer have to recreate representations of experiences that already exist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Approval cycles are streamlined (repetitive elements are no longer up for debate)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reviews become more focused on the core product challenge and breader views of the proposed solution&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plan for maintenance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Has 3 important characteristics&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Accessible - easily found, distributed, to search, and to use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continually improved&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actionable&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&quot;Open sourcing&quot; the design process brings the entire team deeper into the project
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 54
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;chapter-5-mvps-and-experiments&quot;&gt;Chapter 5 - MVPs and Experiments&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
All life is an experiment. The more experiments you make the better.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Ralph Waldo Emerson&lt;br&gt;
&lt;cite&gt;p. 33&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
The sooner we can find which features are worth investing in, the sooner we can focus our limited resources on the best solutions to our business problems
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 55
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MVP - used in 2 different ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create an MVP to learn something - not concerned with delivering value to the market, just want to figure out what the market wants&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a small version of a product or feature because you want to deliver value to the market as quickly as possible. (learning is possible, but not the primary focus)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To maximize learning:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be clear and concise - distill the idea to its core proposition and present that to the customers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prioritize ruthlessly - &quot;Ideas, like artifacts, are transient. Let the best ones prove themselves.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stay agile - focus on being able to make updates quickly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measure behavior - &quot;In digital product design, behavior trumps opinion.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a call-to-action - &quot;You will know people value your solution when they demonstrate that they are using it&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To maximize value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be functional - some level of integration with the rest of your application must be in place to create a realistic usage scenario.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate with existing analytics - Measure performance within the context of existing product workflows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be consistent with the rest of the application - fit current style and brand to minimize biases toward the new functionality&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Regardless of your desired outcome, build the smallest MVP possible. Remember it is a tool for learning. You will be iterating. You will be modifying it. You may very well be throwing it away entirely.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 58
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Stakeholds, often less familiar with their own product than they&amp;#8217;ll ever admit, will likely need a greater level of fidelity in the prototype in order to truly grasp the concept
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 59
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Low-fidelity prototypes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Paper - can give a sense of how the workflow is starting to coalesce around the interface elements you&amp;#8217;ve assembled. Feedback is limited to the high-level structure and flow of the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clickable wireframes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Prototypes help show the project&amp;#8217;s stakeholders that progress is being made&amp;#8230;&amp;#8203;The more exposure the MVP gets, the more insight you&amp;#8217;ll have as to its validity.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 66
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
The mantra to keep in mind when creating non-prototype MVPs is this: &lt;strong&gt;you can always go leaner&lt;/strong&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 68
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Types of non-prototype MVPs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Email - open rates, click-throughs, task completion rates for recipients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Ad Words&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Landing Page - for click-through traffic from Google ads. &quot;Whether it&amp;#8217;s Sign-up, Buy Now, or Share-With-A-Friend, every user who completes the task on your landing page counts as validation of your product idea.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;example-cheryl-yeoh-of-citypockets&quot;&gt;Example: Cheryl Yeoh of CityPockets&lt;/h4&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
This approach - though it involved some design and coding - left out the heavy lifting. Instead, it let Cheryl focus her investment on the smallest possible set of features she needed to support her learning. &lt;strong&gt;At the end of the day, this is the essence of the LeanUX approach. Design only what you need. Deliver it quickly. Create enough customer contact to get meaningful feedback fast.&lt;/strong&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 70
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;chapter-6-feedback-and-research&quot;&gt;Chapter 6: Feedback and Research&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LeanUX takes basic UX research techniques and overlays two important ideas, LeanUX research is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;continuous - build research activities into every sprint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collaborative - research activities and responsibilities are distributed and shared across the entire team&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Our goal in all of this is to create a rich shared understanding across the team
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 74
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Collaborative discovery&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As a team:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;review questions, assumptions, hypotheses &amp;amp; MVPs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decide what you need to learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decide to whom you&amp;#8217;ll need to speak to in order to address your learning goals&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an interview guide to guide conversations&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;think about questions as a sequential funnel:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;target audience?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;confirm problem hypotheses for this segment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;show prototype/mockup last to avoid limiting conversation to your solution vision&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Break team into interview pairs, mixing up the various roles and disciplines within each pair&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arm each pair with a version of the MVP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send each team out to meet with customers/users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have one team member conduct interviews while the other takes notes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start with questions, conversations and observations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demonstrate the MVP later in the session and allow the customer to interact with it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collect notes as the customer provides feedback&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the lead interviewer is done, switch roles to give the note-taker a chance to ask follow-up questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the end of the interview, ask the customer for referrals to other people who might also provide useful feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Continuous discovery&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A critical best practice in LeanUX is building a regular cadence of customer involvement&amp;#8230;&amp;#8203;*In general, knowing your never more than a few days away from customer feedback has a powerful effect on teams. It takes the pressure away from your decision making because you know that you&amp;#8217;re never more than a few days from getting meaningful data from the market
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; pp. 76-77
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meetup - &quot;Three users every Thursday&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Park your outliers
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 81
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
As part of our regular interaction with customers, we always asked a regular set of level-setting questions to capture the &#39;vital signs&#39; of the job seeker&amp;#8217;s search, no matter what other questions, features or products we were testing&amp;#8230;&amp;#8203;aggregated over time, they became very powerful and shaped our future product discussions and considerations
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 82
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&amp;#8230;&amp;#8203;set expectations properly for the type of feedback you&amp;#8217;ll be able to generate with each type of artifact
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; p. 82
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A/B testing tools: Unbounce (landing pages), Google Content Experiments, Adobe Test&amp;amp;Target, Webtrends Optimize&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 26 Jan 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/leanux-my-notes</link>
        <guid isPermaLink="true">http://thepaulrayner.com/leanux-my-notes</guid>
        
        <category>lean</category>
        
        
      </item>
    
      <item>
        <title>Agility is a Skill</title>
        <description>&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/assets/comic/jumping-rope.jpg&quot;&gt;&lt;img src=&quot;/assets/comic/jumping-rope.jpg&quot; alt=&quot;Agility is a Skill&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome to my new comic, &lt;strong&gt;&lt;em&gt;Leading by Design&lt;/em&gt;&lt;/strong&gt;. Like this blog, it is licensed &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;under a Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt; Please share!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Click cartoon to enlarge.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Skills are only learned through practice. Being able to work well as a team to change your software quickly to meet customer needs, without sacrificing quality, based on frequent feedback and learning is no different.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 23 Jan 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/agility-is-a-skill</link>
        <guid isPermaLink="true">http://thepaulrayner.com/agility-is-a-skill</guid>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>Persisting Value Objects</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be challenging sometimes to know how best to persist value objects to a data store, especially if you are using a RDBMS. There are a variety of options to choose from, however, depending on your needs and constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Examples below are based on my &lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby&quot;&gt;Ruby port of the DDD sample app&lt;/a&gt;. Here is a class diagram showing the &lt;code&gt;Cargo&lt;/code&gt; aggregrate, which consists of the &lt;code&gt;Cargo&lt;/code&gt; entity (as the aggregate root) and a number of value objects, such as &lt;code&gt;Itinerary&lt;/code&gt; and &lt;code&gt;RouteSpecification&lt;/code&gt; that are also part of the &lt;code&gt;Cargo&lt;/code&gt; aggregate. This is based on examples given in Eric Evans&amp;#8217;s &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain-Driven Design&lt;/a&gt; book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/cargo.png&quot; alt=&quot;Cargo entity and associated value objects&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Cargo entity and associated value objects&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;inline-value-object-s-fields-to-entity-s-table&quot;&gt;Inline Value Object’s Fields to Entity’s Table&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the simplest arrangement, both in terms of ORM mapping and database schema design. It also is an easy way to support refactoring a value object out of an entity, since only the objects and the ORM mapping would need to change; there is no change to the underlying database schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of this would be refactoring properties such as &lt;code&gt;Origin&lt;/code&gt;, &lt;code&gt;Destination&lt;/code&gt; and &lt;code&gt;Arrival Deadline&lt;/code&gt; out of their original location in the &lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby/blob/master/domain/cargo/cargo.rb&quot;&gt;&lt;code&gt;Cargo&lt;/code&gt; entity&lt;/a&gt; and into a new &lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby/blob/master/domain/cargo/route_specification.rb&quot;&gt;&lt;code&gt;RouteSpecification&lt;/code&gt; value object&lt;/a&gt;. The &lt;code&gt;RouteSpecification&lt;/code&gt; value object, having a one-to-one, relationship with the &lt;code&gt;Cargo&lt;/code&gt; entity, lends itself very naturally to this kind of approach. The same would be true for the &lt;code&gt;Itinerary&lt;/code&gt; value object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-database-table-for-each-of-value-object-type-and-represent-data-as-field&quot;&gt;Create Database Table for each of Value Object Type and Represent Data as Field&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DDD sample app, a single &lt;code&gt;Itinerary&lt;/code&gt; value object has many &lt;code&gt;Leg&lt;/code&gt; value objects. So an example of this approach would be to persist the &lt;code&gt;Legs&lt;/code&gt; value object to a &lt;code&gt;Legs&lt;/code&gt; database table that has a foreign key back to the Itinerary database table. This is a common approach for 1-Many relationships. However, see the next serialization approach as perhaps a more effective solution in many cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;serialize-the-value-object-and-store-in-field-in-entity-s-table&quot;&gt;Serialize the Value Object and Store in Field in Entity’s Table&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a less common than creating a separate table for the value object as in the previous approach, but serialization is actually the method I would recommend in most cases where you have a one-to-many relationship. For example, persist &lt;code&gt;Itinerary&lt;/code&gt; and all its &lt;code&gt;Leg&lt;/code&gt; value objects as a serialized object grap and then inline it into the Entity’s table within the Cargo database table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use an appropriate serialization format such as plain text, XML, YAML or JSON. Databases such as Postgres and SQL Server provide native format for such approaches. For a Postgres example, see Vaughn Vernon&amp;#8217;s post &lt;a href=&quot;https://vaughnvernon.co/?p=942&quot;&gt;The Ideal Domain-Driven Design Aggregate Store?&lt;/a&gt; For an example of manipulating XML with SQL Server, see &lt;a href=&quot;https://www.simple-talk.com/sql/database-administration/manipulating-xml-data-in-sql-server/&quot;&gt;Manipulating XML Data in SQL Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Querying and indexing options may be limited as in SQL Server 2008 XML columns, or even non-existent in many RDMS’s. An ORM will typically need custom code or a custom type, such as in Hibernate, to manage the serialization/deserialization of each collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serializing objects to text-based formats gives you human-readable database data, but is comparatively slow and potentially huge in size compared to regular database columns. It is important to verify that this approach can handle the performance needs before going too far with it. Also, if the serialized value object stored in the DB is opaque (e.g., the only query performed on the column is to serialize/deserialize based on primary key lookep) then consider using a much faster (and typically smaller) format like binary.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;combined-rdms-and-document-database-approach&quot;&gt;Combined RDMS and Document Database Approach&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Java space, SpringSource has been doing some very interesting work for the &lt;a href=&quot;http://www.springsource.org/spring-data&quot;&gt;Spring.Data.Commons and related projects&lt;/a&gt; in the area of what they call &#39;cross-store persistence.&#39; &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt; Portions of your object are persisted to a RDBMS and other portions are persisted to NoSQL stores (and the framework handles persisting and rehydrating the right parts to/from the right data store for you). These are all OSS solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-a-document-database&quot;&gt;Use a Document Database&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CargoRepository&lt;/code&gt; could use an &lt;code&gt;Itinerary&lt;/code&gt; document Id stored in a &lt;code&gt;Cargo&lt;/code&gt; field to retrieve the &lt;code&gt;Itinerary&lt;/code&gt; value object stored in a document database such as MongoDB, RavenDB or CouchDB. Note that many document databases offer transparency of query into the contents of the &#39;document&#39; (i.e. serialized value object in this case), which removes the need to predict which properties, etc. of the value object need to be stored separately in the table as additional fields just so that they can be queried.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To Summarize:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;O-R&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Represent Data in Fields&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Serialize Object&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Reference to Other Storage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Inline in Entity Table&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1-to-1
&lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;* Good O-R mapper support
* Straightforward object/DB schema versioning
* Factoring fields into Value Object doesn’t change DB schema&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1-to-Many/1-to-1 Complex
&lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;* Version management of serialization
* Some performance concerns
* Query limitations
* Field length limitations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Document Id
&lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;* Hybrid approach – store document Id in Entity’s table and lookup in Repository
* Queries supported by document databases&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Separate Table&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1-to-Many
&lt;/p&gt;&lt;p class=&quot;tableblock&quot;&gt;* Good O-R mapper support, but must put ID field in Value Object
* Straightforward object/DB schema versioning&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;X&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Sourced from Steve Bohlen posting to DDD Immersion Alumni Mailing List on 11/17/2011
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 22 Jan 2015 12:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/persisting-value-objects</link>
        <guid isPermaLink="true">http://thepaulrayner.com/persisting-value-objects</guid>
        
        <category>ddd</category>
        
        
      </item>
    
  </channel>
</rss>
