<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paul Rayner&#39;s Blog</title>
    <description>Thinking about DDD, BDD, coding, software design and agile etc.</description>
    <link>http://thepaulrayner.com/</link>
    <atom:link href="http://thepaulrayner.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Jan 2015 02:22:31 +0000</pubDate>
    <lastBuildDate>Fri, 09 Jan 2015 02:22:31 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Build Jekyll-Based Blogs &amp;amp; Websites with AsciiDoc</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Announcing the release of &lt;a href=&quot;https://github.com/asciidoctor/jekyll-asciidoc&quot;&gt;jekyll-asciidoc&lt;/a&gt;, a &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; plugin that converts AsciiDoc files in your site source to HTML pages using &lt;a href=&quot;http://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt;.
&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Start writing your web content in Jekyll using all the richness and clarity of AsciiDoc.&quot;&gt;&lt;/span&gt;
The jekyll-asciidoc gem was written by Dan Allen (&lt;a href=&quot;https://twitter.com/mojavelinux&quot;&gt;@mojavelinux&lt;/a&gt;) and I have &lt;a href=&quot;https://rubygems.org/gems/jekyll-asciidoc&quot;&gt;published the release 1.0.0 version to RubyGems&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jekyll is a simple, blog-aware, static site generator, enabling you to convert plain text content into static websites and blogs. Until recently, Jekyll only supported &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; (or &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;) formatted content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/blog/1939-how-github-uses-github-to-document-github&quot;&gt;How GitHub uses GitHub to document GitHub&lt;/a&gt; announced:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jekyll 2.0 introduced a new plugin type called a &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#converters&quot;&gt;Converter&lt;/a&gt; that transforms any markup into HTML. This frees the writer up to compose content however she chooses, and Jekyll will just serve the final HTML. For example, you can write your posts in AsciiDoc, if that&amp;#8217;s your thing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, that &lt;em&gt;is&lt;/em&gt; my thing. This post is actually written in AsciiDoc and is being rendered using jekyll-asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph dropshadow&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://rubygems.org/gems/jekyll-asciidoc&quot;&gt;&lt;img src=&quot;/assets/jekyll-asciidoc_rubygems.png&quot; alt=&quot;jekyll-asciidoc gem on RubyGems&quot; width=&quot;400&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
GitHub doesn’t (yet) whitelist the AsciiDoc plugin, so you can only run it on your own machine. I set up a Travis CI job to automate publishing of this site to GitHub Pages.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s the actual AsciiDoc content for this blog post. You can see the original file in &lt;a href=&quot;https://github.com/paulrayner/paulrayner.github.com/blob/jekyll/_posts/2015-01-05-jekyll-asciidoc-gem-published.adoc&quot;&gt;my website source repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;2015-01-05-jekyll-asciidoc-gem-published.adoc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;asciidoc&quot;&gt;---
tags:
- AsciiDoc
- Jekyll
excerpt: The jekyll-asciidoc gem has now been released and is available for download at RubyGems. Get it now, and add the richness of AsciiDoc markup to your Jekyll static site generation.
---
:title: Build Jekyll-Based Blogs &amp;amp; Websites with AsciiDoc
:layout: post
:date: 2015-01-05 11:40
:comments: true
:sharing: true


Announcing the release of https://github.com/asciidoctor/jekyll-asciidoc[jekyll-asciidoc], a http://jekyllrb.com/[Jekyll] plugin that converts AsciiDoc files in your site source to HTML pages using http://asciidoctor.org[Asciidoctor].
q:&amp;gt;[Start writing your web content in Jekyll using all the richness and clarity of AsciiDoc.]
The jekyll-asciidoc gem was written by Dan Allen (https://twitter.com/mojavelinux[@mojavelinux]) and I have https://rubygems.org/gems/jekyll-asciidoc[published the release 1.0.0 version to RubyGems].


Jekyll is a simple, blog-aware, static site generator, enabling you to convert plain text content into static websites and blogs. Until recently, Jekyll only supported http://daringfireball.net/projects/markdown/[Markdown] (or http://redcloth.org/textile[Textile]) formatted content.

https://github.com/blog/1939-how-github-uses-github-to-document-github[How GitHub uses GitHub to document GitHub] announced:

[quote]
____
Jekyll 2.0 introduced a new plugin type called a http://jekyllrb.com/docs/plugins/#converters[Converter] that transforms any markup into HTML. This frees the writer up to compose content however she chooses, and Jekyll will just serve the final HTML. For example, you can write your posts in AsciiDoc, if that&#39;s your thing.
____

Yes, that _is_ my thing. This post is actually written in AsciiDoc and is being rendered using jekyll-asciidoc.

[.dropshadow]
image:/assets/jekyll-asciidoc_rubygems.png[jekyll-asciidoc gem on RubyGems, 400, link=&amp;quot;https://rubygems.org/gems/jekyll-asciidoc&amp;quot;]

TIP: GitHub doesn’t (yet) whitelist the AsciiDoc plugin, so you can only run it on your own machine. I set up a Travis CI job to automate publishing of this site to GitHub Pages.

Here&#39;s the actual AsciiDoc content for this blog post. You can see the original file in https://github.com/paulrayner/paulrayner.github.com/blob/jekyll/_posts/2015-01-05-jekyll-asciidoc-gem-published.adoc[my website source repository on GitHub].....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2015/01/05/jekyll-asciidoc-gem-published/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2015/01/05/jekyll-asciidoc-gem-published/</guid>
        
        <category>AsciiDoc</category>
        
        <category>Jekyll</category>
        
        
      </item>
    
      <item>
        <title>Domain-Driven Design in Ruby at DDD Exchange 2013 in London</title>
        <description>&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Leonardo_-_St._Anne_cartoon-alternative-downsampled.jpg/178px-Leonardo_-_St._Anne_cartoon-alternative-downsampled.jpg!&quot; alt=&quot;Burlington House Cartoon&quot; width=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week when I was in London I came across Leonardo DaVinci&amp;#8217;s drawing, &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Virgin_and_Child_with_St_Anne_and_St_John_the_Baptist&quot;&gt;The Virgin and Child with St Anne and St John the Baptist&lt;/a&gt;, while wandering the National Gallery in London. It&amp;#8217;s also known as &lt;em&gt;The Burlington House Cartoon&lt;/em&gt; because drawings of this sort were usually transferred to a board for painting by pricking or incising the outline. With this cartoon, this has not been done, suggesting that the drawing has been kept as a work of art in its own right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I see a sample app as functioning like this cartoon. It&amp;#8217;s not a complete system, and is not intended to be prescriptive in any way. Rather, it is an along-the-way artifact created to learn. It&amp;#8217;s a point-in-time snapshot of a much deeper, largely invisible, learning process, and thus is incomplete in that way too. When the sample app is done, it can function as a teaching tool, as a guide on the way to building something real. As a conversation starter and tradeoff clarifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last Friday I presented at the &lt;a href=&quot;http://skillsmatter.com/event/design-architecture/dddx-2013&quot;&gt;DDD Exchange 2013&lt;/a&gt; hosted by Skills Matter in London on what I&amp;#8217;ve learned recently in exploring doing domain-driven design (DDD) in Ruby. The way I approached this exploration was to start porting the DDD sample app from Java and C# to Ruby. I wanted to do this because it would give me an opportunity to go much deeper in Ruby than every before, while applying DDD concepts and techniques I was familiar with in some unfamiliar ways using new tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started the port to Ruby back in early May, and presented my early findings to an encouraging audience at DDD Denver on May 13. At that point I had only the domain model objects and some of the Rspec tests in place. Much of my time had been taken with investigating how best to implement value objects, and possible different approaches for the UI and for how to tackle enabling eventual consistency between aggregates. I had only begun to work out how to handle persistence with MongoDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I gave the DDD Denver presentation, I was very nervous about presenting such an incomplete effort in public. But I found everyone to be very supportive and it inspired me to keep going. In the next four weeks I was able to solve all the big issues and prepare a presentation for DDD Exchange 2013. If you are interested, Skills Matter did an excellent job of recording the presentation and getting it online. See below for links to resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My hope is that this - currently very unfinished and unpolished - effort sparks interesting conversations about options, tradeoffs and possibilities, and helps others get to grips with the details of how to make DDD real on their projects.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Original slides for today&amp;#39;s &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; 2013 talk Domain-Driven Design with Ruby are now online at &lt;a href=&quot;http://virtual-genius.com/presentations/ddd_with_ruby_20130614&quot;&gt;http://t.co/w9W3wvNz1J&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23DDDesign&amp;amp;src=hash&quot;&gt;#DDDesign&lt;/a&gt;&lt;/p&gt;&amp;mdash; Paul Rayner (@thepaulrayner) &lt;a href=&quot;https://twitter.com/thepaulrayner/statuses/345538141706412032&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a list of resources related to my presentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://virtual-genius.com/presentations/ddd_with_ruby_20130614.html&quot;&gt;Original presentation slides&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://skillsmatter.com/podcast/design-architecture/paul-rayner/mh-7679&quot;&gt;Video of the presentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby&quot;&gt;Sample app on Github&lt;/a&gt; - see the README for a comprehensive list of resources I&amp;#8217;ve compiled as I&amp;#8217;ve researched how to accomplish the Ruby port (including links to the Java and C# apps the port is based on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big thank you again to Skills Matter for hosting such a wonderful event and making it such a special day (for both me and my son).&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Many thanks to all of today&amp;#39;s speakers: &lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;@unclebobmartin&lt;/a&gt; &lt;a href=&quot;https://twitter.com/robsmallshire&quot;&gt;@robsmallshire&lt;/a&gt; &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; &lt;a href=&quot;https://twitter.com/zimakki&quot;&gt;@zimakki&lt;/a&gt; You guys are awesome! &lt;a href=&quot;https://twitter.com/search?q=%23DDDx&amp;amp;src=hash&quot;&gt;#DDDx&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23FF&amp;amp;src=hash&quot;&gt;#FF&lt;/a&gt; (2/2)&lt;/p&gt;&amp;mdash; skillsmatter (@skillsmatter) &lt;a href=&quot;https://twitter.com/skillsmatter/statuses/345596880899682304&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;##Tweets&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Cargo sample is back in ruby ! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jérémie Chassaing (@thinkb4coding) &lt;a href=&quot;https://twitter.com/thinkb4coding/statuses/345489374517006336&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Good session by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about DDD with Ruby &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Nathan Gloyn (@NathanGloyn) &lt;a href=&quot;https://twitter.com/NathanGloyn/statuses/345499135933308928&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; talk about ruby at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; gave me some interesting ideas to explore. Great talk !&lt;/p&gt;&amp;mdash; Thomas Jaskula (@tjaskula) &lt;a href=&quot;https://twitter.com/tjaskula/statuses/345497941353570305&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; really rocked. Cleared away so much fog and sparkled a lot of cool ideas! Thanks! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; ziobrando (@ziobrando) &lt;a href=&quot;https://twitter.com/ziobrando/statuses/345497521143029760&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Really, REALLY interesting session by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about doing DDD in Ruby &lt;a href=&quot;https://twitter.com/search?q=%23DDDX&amp;amp;src=hash&quot;&gt;#DDDX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tom Janssens (@ToJans) &lt;a href=&quot;https://twitter.com/ToJans/statuses/345492748020887552&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Good idea to show the project directory tree to show how to apply DDD with Rails/MongoDB/Mongoid by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; cyrille martraire (@cyriux) &lt;a href=&quot;https://twitter.com/cyriux/statuses/345495156864200706&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; explaining how he did an hexagonal arch in rails application, really nice and clean  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rui Carvalho (@rhwy) &lt;a href=&quot;https://twitter.com/rhwy/statuses/345494558446063616&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Looks like Ruby on Rails smackdown here between activerecord pattern and domain driven pattern. Who will win? &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; DCU CoderDojo (@coderdojodcu) &lt;a href=&quot;https://twitter.com/coderdojodcu/statuses/345496157423812608&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Actors are back in &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; ruby presentation...&lt;/p&gt;&amp;mdash; Jérémie Chassaing (@thinkb4coding) &lt;a href=&quot;https://twitter.com/thinkb4coding/statuses/345495764119732224&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Domain driven design with &lt;a href=&quot;https://twitter.com/search?q=%23ruby&amp;amp;src=hash&quot;&gt;#ruby&lt;/a&gt;  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; &lt;a href=&quot;http://t.co/FMHMtgI1hX&quot;&gt;pic.twitter.com/FMHMtgI1hX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rui Carvalho (@rhwy) &lt;a href=&quot;https://twitter.com/rhwy/statuses/345488522964238336&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;As an exercise, I think I’ll be reimplementing in Python the &lt;a href=&quot;https://twitter.com/search?q=%23dddesign&amp;amp;src=hash&quot;&gt;#dddesign&lt;/a&gt; Ruby sample presented by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href=&quot;https://twitter.com/robsmallshire/statuses/345498791186673664&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Had a good talk during the break with &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about evangelising &lt;a href=&quot;https://twitter.com/search?q=%23DDDesign&amp;amp;src=hash&quot;&gt;#DDDesign&lt;/a&gt; in dynamic languages like ruby and php  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mathias Verraes (@mathiasverraes) &lt;a href=&quot;https://twitter.com/mathiasverraes/statuses/345578077138608128&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; talk at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23ruby&amp;amp;src=hash&quot;&gt;#ruby&lt;/a&gt; &lt;a href=&quot;http://t.co/ryycPIso6k&quot;&gt;pic.twitter.com/ryycPIso6k&lt;/a&gt;&lt;/p&gt;&amp;mdash; Thomas Jaskula (@tjaskula) &lt;a href=&quot;https://twitter.com/tjaskula/statuses/345489563344572416&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I just have to include this one&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Breaking News! Holy Camelshit! Is really possible to apply DDD with Rails! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; DDD Borat (@DDD_Borat) &lt;a href=&quot;https://twitter.com/DDD_Borat/statuses/345497300921090048&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</description>
        <pubDate>Thu, 20 Jun 2013 11:28:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/06/20/domain-driven-design-in-ruby-at-ddd-exchange/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/06/20/domain-driven-design-in-ruby-at-ddd-exchange/</guid>
        
        <category>DDD</category>
        
        
        <category>ddd</category>
        
      </item>
    
      <item>
        <title>Succeeding with DDD - Documentation</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m often asked about what teams doing Domain-Driven Design (DDD) should do in the way of documentation. The question &lt;a href=&quot;http://stackoverflow.com/questions/16284767/what-types-of-written-design-documents-are-used-in-ddd-projects&quot;&gt;What types of Written Design Documents are used in DDD projects?&lt;/a&gt; came up on Stack Overflow and I started to write a response, but realized it was getting way too long to post there. So here it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to documentation, we need to begin with the end in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need
to understand why we are writing it in the first place: What purpose is each
document intending to serve?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem with a lot of documentation is that it is seen as an end in
itself, rather than a means to an end, which is to deliver a quality product
that meets an important customer need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is why agile teams adopt the value of &quot;working software over comprehensive documentation.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, documentation serves a number of important, and different, purposes.
For each documentation artifact, ask: &quot;Is this artifact to support the team
now as it develops the software, or is it to support future development?&quot;
Depending on the answer to this question, approach the documentation in a
different way. Let&amp;#8217;s start with supporting future development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem-of-tribal-mythology&quot;&gt;The Problem of Tribal Mythology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jason Smith in &lt;a href=&quot;http://www.amazon.com/Elemental-Design-Patterns-Jason-Smith/dp/0321711920&quot;&gt;Elemental Design Patterns&lt;/a&gt; says the following about kinds of
documentation supporting future development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know we should document our software; we know we should keep it up to
date; we know we should commit to pen or screen the whys, the hows, and the
reasons; but we also know it is a pain. It really is, so we don’t do it. What
we have instead is a body of knowledge that is locked within the heads of
developers, that is passed along in fits and spurts, when prompted and only
where necessary, frequently without any comprehensive framework of common
understanding among stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Jason points out, Grady Booch has popularized the phrase “tribal knowledge”
for this kind of information artifact. Documenting for the future preserves
the oral tradition by encoding knowledge that already exists. It supports the
later transmission, socializing and sustainability of the &quot;tribal knowledge&quot;
of the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So one type of documentation we create supports future development by
preserving the oral tradition that teams develop along with the software.
Without this kind of documentation &quot;&amp;#8230;&amp;#8203;the collected tribal knowledge degrades
into “tribal mythology” (Booch). When this happens, no one really knows how
the system ended up the way it has, and the knowledge is lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This kind of supporting, future-facing documentation is particularly relevant
where such knowledge is not immediately apparent by reading the code,
supporting tests and other artifacts. Such documentation is typically
written after features/modules are implemented/delivered. It can be produced
as the software is being built, but then there is the additional maintenance
cost of keeping it up-to-date as things change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preserving-tribal-wisdom&quot;&gt;Preserving Tribal Wisdom&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we want to avoid tribal mythology by documenting our systems as necessary.
We want to capture and preserve for people to come the &quot;tribal wisdom&quot; that
has been gained in the rough-and-tumble of developing the system. As Jason
points out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tribal wisdom, however, is the virtuous flip side of this tribal mythology.
It is prescribed action with understanding, how accompanied by why, and is
adaptable to new environments, new situations, and new problems. It transcends
rote copying, and provides illumination through a comprehensive discussion of
the reasons behind the action.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jason Smith&lt;br&gt;
&lt;cite&gt;Elemental Design Patterns&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point in the past, for almost every
action or decision in a system, someone knew why it was done that way.
Carrying those decisions forward, even the small ones, can be critical. Small
decisions accrete into large systems, and small designs build into large
designs. By ensuring that we have a strong tradition of knowledge retention
that facilitates understanding, we build a tradition of tribal wisdom.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jason Smith&lt;br&gt;
&lt;cite&gt;Elemental Design Patterns&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;favor-documenting-over-documentation&quot;&gt;Favor Documenting over Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we support future development by preserving tribal wisdom through
documentation, but what about supporting the team as they develop the product?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the same sense that agile teams favor planning over following a plan, they
tend to favor documenting (as an ongoing, just-in-time, activity) over
creating a (once-and-for all) document. And in the same manner that their
planning is focused around high-fidelity communication, customer collaboration
and team interaction, any documenting they do tends to have the same goals and
characteristics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A plan is only useful until it needs to change, which is why agile teams focus
on enabling and responding to change. The intention is the same with any
documentation they create in service to building a software solution - it
should not be painful, but rather serve the team in better understanding the
problem space, and helping the team grasp what the solution needs to look
like. Let&amp;#8217;s look at some important characteristics of this style of
documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;characteristics-of-useful-documentation&quot;&gt;Characteristics of Useful Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;trustworthy&quot;&gt;Trustworthy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should have to go without saying but, like comments in code, much of the
documentation that exists cannot be trusted. If you have documents that are
supporting your development, make them living documents by keeping them up to
date. They must be correct. They must speak the truth about the software and
the business domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;malleable&quot;&gt;Malleable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of keeping documents trustworthy is enabling change. Documentation must
be malleable - make it as easy to change as possible. Reduce the friction of
having to change it. Documentation that is burdensome to change is less likely
to be kept up-to-date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Makeing it malleable typically means making it as lightweight and informal as
possible. Prefer hand-drawn diagrams over created in a tool (such as Visio),
prefer electronic over hard-copy. Only include the pertinent details. Indicate
which things are tentitive, and which may be harder to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important thing is to understand the purpose of each document, and ensure
that it is kept up to date. As much as possible, push the knowledge into the
code and the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accessible&quot;&gt;Accessible&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation must be as accessible as necessary. Things that the team is
working on right now, I would expect to be on the walls of the team area. Just
the same as many teams use information radiators such as burndown charts and
task boards to track their delivery progress, I like to see sketches of design
diagrams on the walls too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to see a context map on the wall, showing the terrain the team is
dealing with. I&amp;#8217;ve worked with many teams that were not co-located, so we
would put the the documents in shared folders, and on the wiki. Sometimes we
would sketch on a whiteboard, and then take a photo of the diagram and put it
on the team wiki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t let your wiki fall prey to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Tragedy_of_the_commons&quot;&gt;Tragedy of the Commons&lt;/a&gt;. Appoint a curator for your documents if necessary. But strive for team-ownership of the documentation, just as you strive for team ownership of the
code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-doing-ddd&quot;&gt;Documentation and Doing DDD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DDD teams often find they have a leg-up with documentation, because they
devote so much effort to distilling domain knowledge into the software itself
via the domain model. Teams doing DDD are focused capturing the essence of the
critical concepts of the core domain in the domain model &lt;em&gt;itself&lt;/em&gt;. With DDD
the rules, reasoning, assumptions and key business concepts are embedded in
the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I start with a team, the first thing we draw together is a context map.
This diagram helps set them up for success in terms of knowing what context
they are working in, how it relates to their core domain and the other
contexts they need to interact with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For DDD teams, and for software teams in general, the important thing should
be not that the domain is documented, it is that it is &lt;em&gt;understood&lt;/em&gt;, and that
this understanding is shared among everyone connected with developing the
software. Good documentation engenders a shared understanding of the business
domain. Good documentation for a DDD team captures the essence of the
reasoning around the domain model: a rich, expressive software model that
enables significant business capabilities in the core domain, supporting the
strategic goals of the business. Teams doing DDD accomplish this by
simplifying domain complexity enough to provide a shared language and
understanding, and embedding it in the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DDD is not prescriptive about documentation. What documents are produced
usually has more to do with the team&amp;#8217;s existing process than doing DDD.
However, there are certain kinds of documentation that teams doing DDD do find
very helpful. Let&amp;#8217;s look at some of these.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;requirements-specification&quot;&gt;Requirements Specification?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many teams opt for user stories as items in a feature queue, prioritized by value to the business
(i.e. &quot;Product Backlog&quot;, in Scrum terms). See my earlier blog post on &lt;a href=&quot;http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/&quot;&gt;user stories and DDD&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A team doing DDD could use a requirements specification document. But the trap with heavyweight, detailed specification documents is that they tend to &lt;a href=&quot;http://www.leanessays.com/2011/08/dont-separate-design-from.html&quot;&gt;separate design from implementation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Don&amp;#8217;t Separate Design from Implementation&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The theme running through all of my experience is that the long list of
things we have come to call requirements – and the large backlog of things we
have come to call stories – are actually the design of the system. Even a
list of features and functions is design. And in my experience, design is the
responsibility of the technical team developing the system.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suggest we might get better results if we skip writing lists of
requirements and building backlogs of stories. Instead, expect the
experienced designers, architects, and engineers on the development team to
design the system against a set of high-level goals and constraints – with
input from and review by business analysts and product managers, as well as
users, maintainers, and other stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile teams tend to eschew producing detailed requirements specifications,
preferring a more light-weight approach to describing what the system needs to
do. The problem with such documents is that design decisions are made too
early, with insufficient domain and technical knowledge, and having it written
up in a specification tends to set that ignorance in concrete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All too often, detailed requirements lists and backlogs of stories are
actually bad system design done by amateurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The risk in this approach is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating design from implementation amounts to outsourcing the
responsibility for the suitability of the resulting system to people outside
the development team. The team members are then in a position of simply doing
what they are told to do, rather than being full partners collaborating to
create great solutions to problems that they care about.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most teams I coach are following some form of agile process (Scrum, XP etc)
and thus tend to focus more on rapid feedback loops and incremental
development over producing copious amounts of documentation first. This tends
to aid with modeling, as the documentation is produced as-needed, rather than
to get through some &quot;gate&quot; in a prescribed SDLC process. The code itself is
the design, paraphrasing Jack Reeves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some teams find it helpful to develop a list of use cases, a list of tasks the
program is able to perform or some combination of both. I would experiment
with what you find most useful for your team. Use cases have fallen out of
vogue recently, but I am still a big fan of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that I am not against specifying requirements in written form, but rather entombing those requirements (i.e. what features the system should provide to meet the customer&amp;#8217;s needs) in a large tome that locks-in the details of how the system should behave. I have utilized use cases in a lightweight, just-in-time way and found them very useful. See Alistair Cockburn&amp;#8217;s article on &lt;a href=&quot;http://alistair.cockburn.us/Why+I+still+use+use+cases&quot;&gt;Why I still use use cases&lt;/a&gt; for similar reasons to mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would also strongly recommend using mockups and prototypes as much as
possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core-elements&quot;&gt;Core Elements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I typically create a short document that captures the core domain vision
statement and the context map.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture is largely orthogonal, but supportive, for DDD. I find the &lt;a href=&quot;http://en.wikipedia.org/wiki/4%2B1_architectural_view_model&quot;&gt;4+1 architecture&lt;/a&gt; to be the most useful. It is useful to keep in mind that, as Grady Booch declared in 2009, architecture is a &lt;em&gt;shared hallucination&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture is just a collective hunch, a shared hallucination, an assertion by a set of stakeholders on the nature of their observable world, be it a world that is or a world as they wish it to be. Architecture therefore serves as a means of anchoring an extended set of stakeholders to a common vision of that world, a vision around which they may rally, to which they are led, and for which they work collectively to make manifest.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Grady Booch
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that in Krutchen&amp;#8217;s approach, scenarios are the unifying thing.
Reference scenarios are a more specific form of this. See &lt;a href=&quot;http://skillsmatter.com/podcast/design-architecture/paulrayner-domain-scenarios&quot;&gt;my presentation on
domain scenarios at the DDD Exchange 2012&lt;/a&gt; for a walkthrough of using reference
scenarios. In DDD &lt;em&gt;reference&lt;/em&gt; scenarios describe the &lt;em&gt;key business problems
that the model needs to solve&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reference scenarios will be the core domain business capabilities that the
software, and in particular, the domain model, will enable. They often take
the form of a short narrative, with a supporting diagram. Not starting out
that way, but the key is capture the significant details that make the problem
worth solving for the business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;George Fairbanks book, &lt;a href=&quot;http://www.amazon.com/Just-Enough-Software-Architecture-Risk-Driven/dp/0984618104/&quot;&gt;Just-Enough Software Architecture&lt;/a&gt; is the best book I&amp;#8217;ve found on characterizing, describing and documenting software archtictures. I love the pragmatic, risk-driven approach to architecture that this book takes (the sections on modeling alone are excellent, though it defines DDD too narrowly for my taste). If you are looking for something more comprehensive in the software engineering tradition, then it&amp;#8217;s hard to beat the definitive tome: &lt;a href=&quot;http://www.amazon.com/Documenting-Software-Architectures-Views-Beyond/dp/0321552687&quot;&gt;Documenting Software Architectures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ubiquitous-language&quot;&gt;Ubiquitous language&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be helpful having a document that explains the Ubiquitous Language.
Many teams develop a dictionary of significant business terms early on, and
for a team with a business analyst this can be a very significant
contribution. However, the same caveats mentioned above relating to separating
design from implementation are particularly relevant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most software development processes I have encountered, a business analyst or product owner has been assigned the job of writing the requirements or stories or use cases which constitute the design of the system. Quite frankly, people in these roles often lack the training and experience to do good system design, to propose alternative designs and weigh their trade-offs, to examine implementation details and modify the design as the system is being developed.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So as with all the documents described here, the dictionary must be kept up to
date to be useful. Such a dictionary can be an important start, but it
shouldn&amp;#8217;t be the end. I like to see it developed into a document that has
diagrams showing important states of the model, and how the terminology of the
domain model is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As terms change over time, such a document can be a good place to explain why
these changes in language were made, since that kind of historical information
won&amp;#8217;t be obvious by looking at the code etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;informal-uml-diagrams&quot;&gt;Informal UML diagrams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am always sketching UML diagrams on whiteboards. It saddens me that many
teams don&amp;#8217;t see the value in this. I particularly find instance diagrams
particularly useful in walking through scenarios with domain experts. I find
that when the domain experts see the concrete, pertinent business data values
in the &quot;little boxes&quot; in the diagram, it really helps with  understanding what
the model is expressing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many times when I work with a team that has an existing model, one of the
first things I will have the developers do is walk me and the domain expert
through a reference scenario on the whiteboard, explaining how the model
supports solving the important business problem. This activity alone is often
enough to show strengths and weaknesses of the domain model. Instance diagrams
also really help with understanding aggregate boundaries, since aggregates are
runtime artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sequence diagrams can be very helpful for understanding the application flow
from the UI, API, or context boundary down to the domain model. And also in
understanding interactions between sagas, objects, domain services or
aggregates (such as via application services or other infrastucture
responsible for eventual consistency between aggregates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create electronic versions such I often use light-weight UML sketch tools
such as [Web Sequence Diagrams](&lt;a href=&quot;http://www.websequencediagrams.com&quot; class=&quot;bare&quot;&gt;http://www.websequencediagrams.com&lt;/a&gt;) and [yUML](&lt;a href=&quot;http://yuml.me&quot; class=&quot;bare&quot;&gt;http://yuml.me&lt;/a&gt;). I like
the way these tools produce diagrams that look hand-drawn, which lends them
towards being viewed as transient and gives the team permission to change
them. One of the problems with producing high-quality UML diagrams is that it
tends to communicate that they are &quot;done,&quot; and shouldn&amp;#8217;t be changed. That they
are finished.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;anything-else&quot;&gt;Anything else?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m a big fan BDD tool such as Cucumber to create living documentation for
the system, if the team has the skills and experience with such a tool. For
example, the following feature file helps support the ubiquitous language
supporting the underlying conceptual model represented in the domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m biased towards Cucumber as a tool because I like the separation of steps
in feature files and stepdefinitions encourages the separation of ubiquitous
language from the technical implementation. The business terminology goes in
the feature files, and should be refactored as the ubiquitous language is
refined over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am co-authoring the book &lt;em&gt;BDD with Cucumber&lt;/em&gt; for Pearson/Addison Wesley. The book will
cover doing BDD using Cucumber (Ruby), Cucumber-JVM and SpecFlow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But it&amp;#8217;s not the tool that&amp;#8217;s most important, the same thing could be done with
other acceptance testing frameworks such as Concordian, Fitnesse or Robot
Framework. There&amp;#8217;s an interesting discussion going on right now on the &lt;a href=&quot;http://tech.groups.yahoo.com/group/aa-ftt/message/1976&quot;&gt;Agile
Alliance Functional Testing Tools (AA-FTT) mailing list&lt;/a&gt; about these
frameworks and the various tradeoffs they provide. The important thing is the
improvements I see in communication and collaboration when teams use these
tools to refine acceptance criteria for user stories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;standalone-vs-combined-documents&quot;&gt;Standalone vs. Combined Documents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No preference for this. Most teams work this kind of thing out on their own
over time. I&amp;#8217;m not even sure what the factors are for deciding whether to
combine documents or not. My preference is to keep documents short and
focused. I find they are more likely to be read and used if they are concise
and cohesive - maybe principles of good software module design could be
pertinent in structuring documents too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My preference is for diagrams surrounded by text. If a picture is worth a 1000
words, supporting text that explains the critical aspects of the diagram is a
multiplier for this in terms of utility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;respect-your-audience&quot;&gt;Respect Your Audience&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, and most importantly, when writing any software documentation
consider your audience. Will the readers be coders? testers? domain experts?
all of the above? Is this technical documentation, or business-facing
documentation? How you answer these questions should factor strongly in terms
of what kinds of information you include in the document, particularly how
much technical detail you incorporate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s probably a lot of things I&amp;#8217;ve missed here. What has been your experience with doing DDD in terms of documentation?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 07 May 2013 11:40:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/05/07/succeeding-with-ddd-documentation/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/05/07/succeeding-with-ddd-documentation/</guid>
        
        <category>DDD</category>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>Agile User stories and Domain-Driven Design (DDD)</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Monday night at our DDD Denver meetup we ended up having a valuable and lively group discussion using a modified &lt;a href=&quot;http://systemagility.com/2012/04/16/enjoy-a-lean-coffee/&quot;&gt;Lean Coffee&lt;/a&gt;. The four questions we covered (in order) were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Where to start in developing a domain model?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the biggest hurdle for a team adopting DDD?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the intersection of DDD &amp;amp; agile user stories?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Techniques for implementing DDD across geographically dispersed teams&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we discussed the intersection of DDD and user stories, I mentioned a quick reference guide that I have used for my own coaching and training over the years. There seemed to be a lot of interest in having me share the resource more widely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I am now making my &quot;Stories for Design and Delivery&quot; reference freely and publicly available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This double-sided quick-reference provides a wealth of distilled content about how to integrate stories and design, including making decisions about splitting based on business subdomain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on either thumbnail below to download the full-size PDF version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;front&quot;&gt;Front&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock dropshadow&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.virtual-genius.com/resources/Stories-for-design-and-delivery.pdf&quot;&gt;&lt;img src=&quot;/assets/stories-for-design-and-delivery-thumbnail1.png&quot; alt=&quot;Stories for design and delivery - Front&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;back&quot;&gt;Back&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock dropshadow&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.virtual-genius.com/resources/Stories-for-design-and-delivery.pdf&quot;&gt;&lt;img src=&quot;/assets/stories-for-design-and-delivery-thumbnail2.png&quot; alt=&quot;Stories for design and delivery - Back&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I put the first version of the guide together back in 2009 as a quick reference guide for Mike Cohn&amp;#8217;s &lt;em&gt;User Stories Applied&lt;/em&gt;. I needed an easier way to get the whole team to understand user stories without forcing them all to read the book (as good as it is, this wasn&amp;#8217;t going to happen). I printed and laminated a bunch of copies and distributed them to the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iteration two was several years ago when Richard Lawrence published his excellent &lt;a href=&quot;http://www.richardlawrence.info/2009/10/28/patterns-for-splitting-user-stories/&quot;&gt;Patterns for Splitting User Stories post&lt;/a&gt; (also referenced as a footnote on the guide&amp;#8217;s second page). At that time I incorporated Richard&amp;#8217;s material into the second page, greatly improving the guidance around splitting stories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve used this guide many times over the years in my classes and coaching, teaching teams how to collaboratively and creatively decompose their functionality into manageable increments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iteration three was almost a year ago, when I decided to move away from the conventional agile community&amp;#8217;s terminology and emphasis on process, and focus on how stories can support design, rather than fragment it. I tried to approach it first and foremost as a DDD practitioner, concerned about putting design first. So I incorporated my current understanding of how domain modeling, tactical design practices and strategic design (i.e. mainly subdomain distillation) fits with how most teams manage their work items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Note: I&amp;#8217;ve deliberately defied convention by not calling them _user&lt;/em&gt; stories. Stories - as I conceive of them - may relate directly to customers, users, stakeholders and even predominantly technical considerations, not just end users. Some heavily design-focused stories, such as building an anti-corruption layer in front of a back-end system, might only be exposed to users tangentially via seemingly unrelated functionality (from their perspective)._&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just recently, Richard has reworked his story splitting guide into an excellent flow chart: &lt;a href=&quot;http://www.richardlawrence.info/2012/01/27/new-story-splitting-resource&quot;&gt;How to Split a User Story&lt;/a&gt;, which I highly recommend as a more process-focused complement to mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this is as helpful to others as it has been to me. Let me know in the comments if you do find this useful. And please let me know any ways I might improve the quick reference guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The document is designed to be printed double-sided. I recommend laminating your copies before you hand them out so they last longer and are less likely to get lost in a pile of paper.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 15 Feb 2013 21:14:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/</guid>
        
        <category>DDD</category>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>Word Document to Asciidoc Conversion</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had content in Word documents that I needed to convert to Asciidoc for our book. Here are the steps I found to work best:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Save Word doc as HTML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encode as UTF-8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use pandoc to convert from HTML to AsciiDoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Sublime Text 2 search and replace (using some regular expressions) to strip out crazy things&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Sublime Text 2 to perform any remaining formatting&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;save-word-doc-as-html&quot;&gt;Save Word doc as HTML&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the document in Word, and then save as a web page. &lt;em&gt;Select the &quot;Save only Display Information into HTML&quot; option when saving.&lt;/em&gt; Exit from Word (and wave it goodbye as you do!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;encode-as-utf-8&quot;&gt;Encode as UTF-8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the html file in Sublime Text 2. Avert your eyes at the horror that is Word-formatted HTML. Reopen with encoding UTF-8 and save the file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/sublime-text-utf8.png&quot; alt=&quot;Sublime Text 2 Reopen with Encoding&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I don&amp;#8217;t recode as UTF-8, then the next step will fail with the error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;pandoc: Cannot decode byte &#39;\x6f&#39;: Data.Text.Encoding.decodeUtf8: Invalid UTF-8 stream&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-pandoc-to-convert-from-html-to-asciidoc&quot;&gt;Use Pandoc to convert from HTML to AsciiDoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt;. For example, the following command takes &lt;code&gt;ConventionSheet.htm&lt;/code&gt; and converts it to the AsciiDoc file &lt;code&gt;file.asc&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;pandoc -f html -t asciidoc -o file.asc ConventionSheet.htm&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-sublime-text-2-search-and-replace-using-some-regular-expressions-to-strip-out-crazy-things&quot;&gt;Use Sublime Text 2 search and replace (using some regular expressions) to strip out crazy things&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weird single quotes need to go:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/sublime-text-backtick-replace.png&quot; alt=&quot;Sublime Text 2 Replace backtick with single quote&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you had reviewing turned on in Word, then reviewer comments and changes will likely be present in the HTML. Remove these using a search and replace with the following Regex in the search field:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;\[line-through\]\*(.+)\*&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When matched lines cross line breaks then you can use the single line option (&lt;code&gt;?s&lt;/code&gt;) in your regex for search and replace:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(?s)\[line-through\]\*.(.*?)\*&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-sublime-text-2-to-perform-any-remaining-asciidoc-formatting&quot;&gt;Use Sublime Text 2 to perform any remaining AsciiDoc formatting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monospace any regex or other special characters (these will cause problems for the AsciiDoc parser) in the document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Edit the AsciiDoc document as you wish! Note that GitHub now natively displays AsciiDoc files (using &lt;a href=&quot;http://asciidoctor.org/news/asciidoctor-announcement.html&quot;&gt;AsciiDoctor&lt;/a&gt; behind the scenes), just as it does for Markdown.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 14 Feb 2013 15:35:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/14/word-to-asciidoc/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/14/word-to-asciidoc/</guid>
        
        <category>Writing</category>
        
        <category>Tools</category>
        
        <category>Productivity</category>
        
        <category>AsciiDoc</category>
        
        
      </item>
    
      <item>
        <title>Colors when viewing folders in Terminal</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Saw directory listing coloring at Golden Ruby Users Group this week, and needed to have it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://linux-sxs.org/housekeeping/lscolors.html&quot;&gt;LsColors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;LS_COLORS=&#39;di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35:*.rpm=90&#39;
export LS_COLORS&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://norbauer.com/notebooks/code/notes/ls-colors-and-terminal-app&quot;&gt;ls, colors and Terminal.app&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Customize Your Colors&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The values in LSCOLORS are codes corresponding to different colors for different types of files. The letter you use indicates which color to use, and the position in the string indicates what type of file should be that color. Each color comes in pairs – a foreground color and a background color. Here is a list of color values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a = black&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b = red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c = green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d = brown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e = blue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f = magenta&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g = cyan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;h = grey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A = dark grey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B = bold red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C = bold green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D = yellow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E = bold blue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F = magenta&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G = cyan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;H = white&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x = default&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here is a list of the positions in LSCOLORS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;symbolic link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;socket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pipe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;block device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;character device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable with setuid set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable with setguid set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;directory writable by others, with sticky bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;directory writable by others, without sticky bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/&quot;&gt;Colors for Dark Terminal Themes&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 07 Feb 2013 15:33:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/07/colors-when-viewing-folders-in-terminal/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/07/colors-when-viewing-folders-in-terminal/</guid>
        
        <category>Coding</category>
        
        <category>Productivity</category>
        
        
      </item>
    
      <item>
        <title>Array Slicing in Ruby</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve found the Ruby Koans to be brilliant for exposing a learner to aspects of the language that are not obvious, or even weird, at first glance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;indexing-ruby-arrays&quot;&gt;Indexing Ruby Arrays&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s look at a koan for accessing array elements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;test_accessing_array_elements&lt;/span&gt;
  array = [&lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:butter&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:and&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;]

  assert_equal &lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;, array[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;]
  assert_equal &lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;, array.first
  assert_equal &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;, array[&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;]
  assert_equal &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;, array.last
  assert_equal &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;, array[&lt;span class=&quot;integer&quot;&gt;-1&lt;/span&gt;]
  assert_equal &lt;span class=&quot;symbol&quot;&gt;:butter&lt;/span&gt;, array[&lt;span class=&quot;integer&quot;&gt;-3&lt;/span&gt;]
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is my first time seeing negative array references in any language. I was able to surmise (correctly) that they refer to entries counting backwards from the end of the array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/Array.html&quot;&gt;Core API Documents - Array&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A negative index is assumed to be relative to the end of the array—that is, an index of -1 indicates the last element of the array, -2 is the next to last element in the array, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to the Core API docs, indexing an array can also give us &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ary[index] → obj or nil&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting a &lt;code&gt;nil&lt;/code&gt; would seem to be the likely behavior if we try to index beyond the boundary of the array. Let&amp;#8217;s try it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [4]
=&amp;gt; nil&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected, we get &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far, so good. Indexing seems to work in a way mostly familiar from past experience in other languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slicing-ruby-arrays&quot;&gt;Slicing Ruby Arrays&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s try slicing, not indexing, arrays. The call, according to the Core API docs, is of the form:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ary[start, length] → new_ary or nil&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the array[s, n] syntax means: retrieve n elements from the array starting by the s-th position, unless there is some reason to return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s use the same array as before, adding it in IRB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array = [:peanut, :butter, :and, :jelly]
 =&amp;gt; [:peanut, :butter, :and, :jelly]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get the first array element:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array[0, 1]
=&amp;gt; [:peanut]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which says, get me the relevant slice of the array starting at position zero, with a length of one. No difficulties so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;If you try to access elements from the array using n=0, you will get [] as a result (within the range of the array).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s try &lt;em&gt;slicing&lt;/em&gt; (instead of accessing via index) beyond the end of the array:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [5,0]
=&amp;gt; nil&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [6,10]
=&amp;gt; nil&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No matter what starting point we try after 5, or what length we specify, we will get &lt;code&gt;nil&lt;/code&gt;. Once again, straightforward and expected behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s where it got a little weird for me:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [4,0]
=&amp;gt; []&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [4,1]
=&amp;gt; []&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; array [4,100]
=&amp;gt; []&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we specify a starting point of 4, we get an empty array, regardless of how many elements we request. The semantics are subtly different at this boundary point. According to the Core API docs, it&amp;#8217;s a special case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issue arises because I&amp;#8217;m used to thinking about accessing arrays, but this is slicing. The way to think about slicing needs to be different. As a &lt;a href=&quot;http://stackoverflow.com/questions/3568222/array-slicing-in-ruby-looking-for-explanation-for-illogical-behaviour-taken-fr&quot;&gt;response to this question on Stack Overflow points out&lt;/a&gt;, treat the first number when you slice not as identifying the element, but &lt;strong&gt;places between elements&lt;/strong&gt;, in order to be able to define spans (and not elements themselves):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;  :peanut   :butter   :and   :jelly
0         1         2      3        4&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What this means is that 4 is still within the array, from a slicing perspective; if you request 0 elements, you get the empty end of the array. But since there is no index 5, it&amp;#8217;s outside the bounds of the array, you can&amp;#8217;t slice from there. Indexing, of course, refers to the elements themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/380637&quot;&gt;final example&lt;/a&gt;, using assignment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;t = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
t[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
t[&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
t
=&amp;gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;(hi)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Ruby Koans these are the tests that highlight the differences:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;test_slicing_arrays&lt;/span&gt;
  array = [&lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:butter&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:and&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;]

  assert_equal [&lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;], array[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]
  assert_equal [&lt;span class=&quot;symbol&quot;&gt;:peanut&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:butter&lt;/span&gt;], array[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;]
  assert_equal [&lt;span class=&quot;symbol&quot;&gt;:and&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;], array[&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;]
  assert_equal [&lt;span class=&quot;symbol&quot;&gt;:and&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:jelly&lt;/span&gt;], array[&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;20&lt;/span&gt;]
  assert_equal [], array[&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;]
  assert_equal [], array[&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;]
  assert_equal &lt;span class=&quot;predefined-constant&quot;&gt;nil&lt;/span&gt;, array[&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks also to the &lt;a href=&quot;http://mybrainstormings.wordpress.com/2012/09/10/arrays-in-ruby/&quot;&gt;My Brainstormings blog&lt;/a&gt; for additional help with understanding how arrays work in Ruby.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 07 Feb 2013 10:03:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/07/array-slicing-in-ruby/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/07/array-slicing-in-ruby/</guid>
        
        <category>Ruby</category>
        
        <category>Coding</category>
        
        
        <category>ruby</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Object Ids in Ruby</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my effort to master Ruby this year, I started this morning working through &lt;a href=&quot;http://rubykoans.com&quot;&gt;Ruby Koans&lt;/a&gt;. I just completed these tests and was intrigued by the comment in the second koan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;test_some_system_objects_always_have_the_same_id&lt;/span&gt;
  assert_equal &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;.object_id
  assert_equal &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;.object_id
  assert_equal &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;nil&lt;/span&gt;.object_id
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;test_small_integers_have_fixed_ids&lt;/span&gt;
  assert_equal &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;.object_id
  assert_equal &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;.object_id
  assert_equal &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;.object_id
  assert_equal &lt;span class=&quot;integer&quot;&gt;201&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;.object_id

  &lt;span class=&quot;comment&quot;&gt;# THINK ABOUT IT:&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# What pattern do the object IDs for small integers follow?&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To put it another way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt;&amp;gt; (0..50).each { |i| print i.object_id, &#39; &#39; }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What would you expect to see as output? You can find the answer in &lt;a href=&quot;http://stackoverflow.com/questions/3952730/fixed-object-id-for-system-objects-and-small-integers-in-ruby&quot;&gt;Fixed Object Id for System Objects and Small Integers in Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But why does this happen? I did a little digging and found these 2006 articles by Caleb Tennis on &lt;a href=&quot;http://www.oreillynet.com/ruby/blog/2006/01/the_ruby_value_1.html&quot;&gt;The Ruby VALUE&lt;/a&gt; and &lt;a href=&quot;http://www.oreillynet.com/ruby/blog/2006/02/ruby_values_and_object_ids.html&quot;&gt;Ruby Values and object_ids&lt;/a&gt;. In the first article he points out that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first point of interest is the VALUE - Ruby’s internal representation of its objects. In the general sense, a VALUE is just a C pointer to a Ruby object data type. We use VALUEs in the C code like we would use objects in the Ruby code.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;for performance purposes, Ruby doesn’t use the VALUE as a pointer in every instance. For Fixnums, Ruby stores the number value directly in the VALUE itself. That keeps us from having to keep a lookup table of every possible Fixnum in the system.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also a good Stack Overflow answer to this question of &lt;a href=&quot;http://stackoverflow.com/questions/3430280/ruby-how-does-object-id-assignment-work&quot;&gt;how object assignment works in Ruby&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In MRI the &lt;code&gt;object_id&lt;/code&gt; of an object is the same as the &lt;code&gt;VALUE&lt;/code&gt; that represents the object on the C level. For most kinds of objects this &lt;code&gt;VALUE&lt;/code&gt; is a pointer to a location in memory where the actual object data is stored. Obviously this will be different during multiple runs because it only depends on where the system decided to allocate the memory, not on any property of the object itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However for performance reasons &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;Fixnum`s are handled specially. For these objects there isn&amp;#8217;t actually a struct with the object&amp;#8217;s data in memory. All of the object&amp;#8217;s data is encoded in the `VALUE&lt;/code&gt; itself. As you already figured out the values for &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; and any &lt;code&gt;Fixnum&lt;/code&gt; &lt;code&gt;i&lt;/code&gt;, are &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;i*2+1&lt;/code&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason that this works is that on any systems that MRI runs on, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;i*2+1&lt;/code&gt; are never valid addresses for an object on the heap, so there&amp;#8217;s no overlap with pointers to object data.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I highly recommend using a koan-based approach to learning the details of a new language. There&amp;#8217;s a good list of links for various languages in &lt;a href=&quot;http://rubygeek.github.com/2011/01/22/koan-a-copia/&quot;&gt;Koan-a-Copia!&lt;/a&gt; article by &lt;a href=&quot;https://twitter.com/rubygeekdotcom&quot;&gt;Nola Stowe&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 06 Feb 2013 11:26:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/06/object-ids-in-ruby/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/06/object-ids-in-ruby/</guid>
        
        <category>Ruby</category>
        
        <category>Coding</category>
        
        
        <category>ruby</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Blogging with Octopress and Github Pages</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are &lt;a href=&quot;http://alblue.bandlem.com/2012/02/advantages-of-octopress.html&quot;&gt;4 good reasons from AlBlue&amp;#8217;s blog&lt;/a&gt; to consider using Octopress for a technical blog:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jekyll-based&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stylish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See also &lt;a href=&quot;http://www.neilsmithline.com/blog/2012/05/26/octopress-is-pretty-great/&quot;&gt;Octopress Is Pretty Great&lt;/a&gt;, which has a great description of not only the positives of Octopress, but also a good step-by-step summary of how to configure Octopress for your environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-octopress&quot;&gt;Why Octopress?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jekyll-style approach is to write content in an author-friendly text format (i.e. &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;) that is then translated to HTML and served up as such is gaining more and more momentum over the more common CMS-style approach. Tom Preston Werner &lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;wrote Jekyll back in 2008&lt;/a&gt;, and it is now used to &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;serve content on Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With my previous blog I had been using BlogEngine.NET, which is a nice full-featured .NET-based blogging engine that didn&amp;#8217;t require me to install and configure SQL Server on my virtual host. I generally liked BlogEngine.NET, but found the authoring experience tedious, and the updates a hassle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In writing blog posts on my MBP I struggled with using OSX-based HTML editors, finding they only got in the way of the writing process. I really wanted to move to tools I am either more comfortable with already, or interested in mastering: Ruby, Rake, SASS, Jekyll, Markdown, Sublime Text 2, Byword, Marked, and Git. As Joel Hooks says on his &lt;a href=&quot;http://joelhooks.com/blog/2012/07/25/fresh-start-migrating-wordpress-octopress/&quot;&gt;Fresh Start&lt;/a&gt; blog post:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[Octopress]&amp;#8230;&amp;#8203;falls well into the &lt;a href=&quot;http://redsquirrel.com/dave/work/a2j/patterns/BreakableToys.html&quot;&gt;breakable toy&lt;/a&gt; category of things, and that is something I can use right now as I learn new tools. I’m looking forward to improving this space with quality content about modern standards-based web development with open source tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jekyll-based toolset really suits my workflow. I can write my posts in Markdown lightweight plain text format with Sublime Text 2 or Byword, manage all my changes in Git with full support for lightweight branching and additive changes, preview it with a &lt;code&gt;Rake Preview&lt;/code&gt; and serve it all up with a &lt;code&gt;Rake Deploy&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;potential-downside&quot;&gt;Potential Downside?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be fair, AlBlue&amp;#8217;s blog also lists some &lt;a href=&quot;http://alblue.bandlem.com/2012/02/disadvantages-of-octopress.html&quot;&gt;possible disadvantages of Octopress&lt;/a&gt;. Part of what he mentions is the lack of separation between content and plumbing, in that there’s really five sets of things to manage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The source posts (in Markdown format)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The layout and supporting scaffolding (in HTML/Liquid templates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugins for Jekyll to know how to process the Liquid templates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Octopress supporting management code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The published HTML&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;His point is that the first two items (the source posts, layout and templates) should be in source control, but the:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;plugins and octopress management code really need to live in a different Git repository, though, so that they can be upgraded independently.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes a lot of sense, but I don&amp;#8217;t feel bothered by this at the moment, and fully expect the gap here to be addressed sometime in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting a new theme installed was certainly a very straightforward exercise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started-with-octopress&quot;&gt;Getting Started with Octopress&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the following blog posts for help with getting this set up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tomordonez.com/blog/2012/06/04/creating-a-github-blog-using-octopress/&quot;&gt;Creating a Github blog with Octopress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mattgemmell.com/2011/09/12/blogging-with-octopress/&quot;&gt;Matt Gemmell on blogging with Octopress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and thanks also for very timely Twitter help from GitHubber &lt;a href=&quot;https://twitter.com/matthewmccull&quot;&gt;Matthew McCullough&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/github-pages-user-versus-project-pages.png&quot; alt=&quot;Twitter Conversation with @matthewmccull&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-cool-octopress-resources&quot;&gt;More Cool Octopress Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the process of researching Octopress, I stumbled across some other helpful resources, so I&amp;#8217;ve put them here in the hope they might be helpful to others too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://adampreble.net/blog/2012/09/another-octopress-blog/&quot;&gt;Switching from Wordpress to Octopress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12328828/directory-structure-of-octopress&quot;&gt;Directory structure of Octopress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scottw.com/octopress-tips&quot;&gt;Octopress tips by Scott Watermasysk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Github pages aren&amp;#8217;t the only game in town, as &lt;a href=&quot;http://twitter.com/aeroplanesoft&quot;&gt;@aeroplanesoft&lt;/a&gt; pointed out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/hosting-octopress-s3.png&quot; alt=&quot;Hosting Octopress on Amazon S3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re using &lt;code&gt;rbenv&lt;/code&gt;, as I was initially, then start with &lt;a href=&quot;http://kvz.io/blog/2012/09/25/blog-with-octopress/&quot;&gt;Blog with Octopress and Github Pages&lt;/a&gt; for a good description of working with &lt;code&gt;rbenv&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;customize-your-blog&quot;&gt;Customize your Blog!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Wynn Netherland points out, &lt;a href=&quot;http://wynnnetherland.com/journal/octopress-classic-is-the-new-kubrick&quot;&gt;Octopress Classic is the new Kubrick&lt;/a&gt;, so customize your blog. Make it your own. Take a look at some of the &lt;a href=&quot;http://www.meatleasing.com/octopress-hidden-features/index.html&quot;&gt;Octopress &quot;hidden&quot; features&lt;/a&gt; and get creative (I really like the Octopress theme fellow DDD Denver member Leo Gorodinski is using &lt;a href=&quot;http://gorodinski.com&quot;&gt;on his blog&lt;/a&gt;). Or, if you are front-end design-challenged like me, get an expert like &lt;a href=&quot;https://twitter.com/thejordanmcc&quot;&gt;Jordan McCullough&lt;/a&gt; to develop a theme for you. &quot; Friends don&amp;#8217;t let friends stick with the Octopress default template. &quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This started out as a post about installing Octopress, and became something much more for me. I&amp;#8217;ve found since I stopped blogging that I have amassed a huge amount of notes and sites captured in Evernote, but I haven&amp;#8217;t been sharing my discoveries back with the wider community. So I&amp;#8217;ve resolved to write a blog post instead of stashing away things I find into my own private area, add commentary when I can, and write substantial informational posts of my own from time to time. That way others can benefit from what I&amp;#8217;m learning.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;serve-the-community&quot;&gt;Serve the Community&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Scott Hanselman said in &lt;a href=&quot;http://www.hanselman.com/blog/YourBlogIsTheEngineOfCommunity.aspx&quot;&gt;Your Blog is the Engine of Community&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
I would encourage you &lt;em&gt;all&lt;/em&gt; to blog more. Tweet less.** Blogs are owned by you. They are easily found, easily linked to, and great conversations happen with great blog posts. The river of social media rushes on and those conversations are long forgotten. A great blog post is forever. Today&amp;#8217;s real-time social media is quickly forgotten.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Scott Hanselman&lt;br&gt;
&lt;cite&gt;http://www.hanselman.com/blog/YourBlogIsTheEngineOfCommunity.aspx]&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll never even come close to being as prolific as Scott Hanselman or Ayende Rahien (I don&amp;#8217;t know how they do it), but I&amp;#8217;ll aim for something of a sustainable cadence to my posts. Don&amp;#8217;t make the same mistake I&amp;#8217;ve been making by stashing useful content and your valuable knowledge in a private location. &lt;a href=&quot;http://www.hanselman.com/blog/YourWordsAreWasted.aspx&quot;&gt;Own your own content&lt;/a&gt;, and don&amp;#8217;t be afraid to share it widely so that others can learn.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Don&amp;#8217;t be a meme, be a movement
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Scott Hanselman&lt;br&gt;
&lt;cite&gt;http://www.hanselman.com/blog/YourBlogIsTheEngineOfCommunity.aspx&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 04 Feb 2013 12:26:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/04/blogging-with-octopress-and-github-pages/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/04/blogging-with-octopress-and-github-pages/</guid>
        
        <category>Writing</category>
        
        <category>Productivity</category>
        
        
        <category>writing</category>
        
        <category>productivity</category>
        
      </item>
    
      <item>
        <title>Book Review: Implementing Domain-Driven Design</title>
        <description>&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/iddd_thumbnail.jpg&quot; alt=&quot;Implementing DDD&quot; width=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a review of the book &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; by Vaughn Vernon, based on the &lt;a href=&quot;http://my.safaribooksonline.com/book/project-management/9780133039900&quot;&gt;Safari Books Online rough cut edition&lt;/a&gt;. The book is also &lt;a href=&quot;http://amzn.to/RN4qWJ&quot;&gt;available on Amazon.com&lt;/a&gt;. Rather than try to cover everything, I’ll be focusing on the parts of the book that I found most interesting and helpful: highlighting the things that stood out to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been a certified &lt;a href=&quot;http://www.domainlanguage.com/about&quot;&gt;Domain Language DDD instructor&lt;/a&gt; for over two years now, and the most common question I am asked is where to find solid, pragmatic advice on how to actually implement DDD using the frameworks and tools with which developers are already familiar. The good news is &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; more than adequately fills the lacuna.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-background&quot;&gt;Some Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of 2011 I was privileged to be a technical editor for Vaughn&amp;#8217;s &lt;a href=&quot;http://dddcommunity.org/library/vernon_2011&quot;&gt;Effective Aggregate Design series&lt;/a&gt;. Around the same time I also enjoyed hearing Vaughn present a series on effective aggregate design locally at our &lt;a href=&quot;#ddd-denver&quot;&gt;DDD Denver&lt;/a&gt; meetup. So, for the sake of full disclosure, I have known Vaughn personally for years and collaborate often with him on the meetup. I’ve tried to be as impartial as possible in reviewing the book, basing my observations and opinions on the content alone. &lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;This book is up-to-date, easily comprehensible, free from dogma and the advice it gives is firmly grounded in the real-world experience of one of DDD&amp;#8217;s foremost practitioners.&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been recommending &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; to my students mainly on the basis of the high quality of the aggregate design articles and presentations, and Vaughn’s many significant contributions to the DDD mailing list over the years. But now I am pleased to base my recommendation also on a full read of the Safari Books Online rough cut edition of Implementing DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distilled-ddd-wisdom&quot;&gt;Distilled DDD Wisdom&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While there is plenty out there in the way of &lt;a href=&quot;#ddd-resources&quot;&gt;DDD Resources&lt;/a&gt;, what Vaughn has done with this book is to distill much of the wisdom of the DDD community into a single book that provides pragmatic, expert guidance on how best to succeed with implementing DDD.  This is the book I want DDD students purchasing and reading alongside &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;the Blue Book&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I thoroughly appreciated the pretension-free way &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; approaches everything. For example, it introduces domain-driven design (DDD) by stating:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DDD brings domain experts and software developers together in order to develop software that reflects the mental model of the business experts. This does not mean that effort is spent on modeling the “real world.” Rather, DDD delivers a model that is the most useful to the business. Sometimes useful and realistic models happen to intersect, but to the degree that they diverge, DDD chooses useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vaughn&amp;#8217;s book comes across as guidance from a good friend, combining occasional corny cowboy jokes that keep it fun with detailed, solid advice on the deepest recesses of the mechanics of applying DDD using the tools and techniques of today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The book&amp;#8217;s approach of developing an application to support Scrum and walking through how the team approached the problems they were up against is very helpful, especially when Vaughn digs into the team&amp;#8217;s mis-steps as they learn, adjust and improve. Contrary to any material online which might lead you to think that DDD is about overblown architectures, heavyweight frameworks and obfuscated approaches, in chapter one &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; counsels that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use DDD to model a complex domain in the simplest possible way. Never use DDD to make your solution more complex.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;knowing-when-and-knowing-how&quot;&gt;Knowing When and Knowing How&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a very helpful chart that helps the reader identify whether DDD is the right approach in a particular situation. So much of what I read about DDD online seems to be applying it where it will add little value. So much emphasis on how to apply the DDD building block patterns where they are not needed. Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some confuse DDD with &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_Design_Up_Front&quot;&gt;Big Design Up Front (BDUF)&lt;/a&gt;, and thus struggle with understanding how DDD and agile relate. I was also pleased that &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; starts out by emphasizing the agile, iterative, continuous modeling with domain experts that is at the heart of DDD “done well.” For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The word “design” can evoke negative thoughts in the minds of business management. However, DDD is not a heavyweight, high ceremony design and development process. DDD is not about drawing diagrams. It is about carefully refining the mental model of domain experts into a useful model for the business.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fundamental-concepts&quot;&gt;Fundamental Concepts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first chapter also does a good job of introducing the fundamental concepts of Ubiquitous Language, Bounded Context, and Core Domain. It also lays out clearly the costs and benefits of applying DDD, and how DDD as a lightweight, intentional approach to continous design is a natural fit for agile teams. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If developing a given Subdomain requires such a difficult, even precarious, assent, we’d bring the DDD tactical patterns along for the climb. A business initiative that matches the criteria of Core Domain should not quickly dismiss the use of the tactical patterns. The Core Domain is an unknown and complex area. The team is best protected against a disastrous mid-asset fall if using the right tactics&amp;#8230;&amp;#8203;
First we want to focus on how the model will be used by clients, and these tests drive the model’s design. The good news is, it really is an agile approach. DDD promotes lightweight development, not ceremonious, heavy, upfront design.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;strategic-design-with-ddd&quot;&gt;Strategic Design with DDD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In chapter two, &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; covers strategic design. Vaughn’s explanation and application of the distinction between problem and solution space in this chapter is particularly helpful, and I intend to incorporate this approach into how I do strategic design from now on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This helpful problem/solution distinction at the strategic design level reminds me somewhat of the distinction at the tactical level between the Scenario and Model and Code Probe steps in the &lt;a href=&quot;http://www.domainlanguage.com/ddd/whirlpool&quot;&gt;Model Exploration Whirlpool&lt;/a&gt;. In the Whirlpool the Scenario step is focused on learning and understanding the problem space, and the Model and Code Probe steps primarily address exploring and defining potential solutions. However, the entire process - every step in the whirlpool - is geared towards delving into a deeper understanding of the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Putting strategic design right at the start of the book highlights the relative importance of getting the strategic aspects right: explaining why strategic design is important, and setting the stage for the reader to understand and explore careful application of the building block patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve encountered people who have (mistakedly) confused DDD with efforts to model the overall enterprise, so I heartily agreed with &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;&#39;s advice to avoid the temptation to create a single, enterprise model:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;developing a Domain Model is actually one way that we focus on only one specific area of the whole business domain. Any attempt to define the business of even a moderately complex organization in a single, all encompassing model, will be at best extremely difficult, and will usually fail&amp;#8230;&amp;#8203; vigorously separating distinct areas of the whole business domain will help us succeed.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section also does a praiseworthy job of explaining Bounded Context as intrinsically a &lt;em&gt;linguistic concept&lt;/em&gt;: one tied to ubiquitous language and then supported by the technical implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we employ DDD we strive for each Bounded Context to mark off where the meaning of every term used by the domain model is well understood, or at least should be if we’ve done a good job of modeling the software. &lt;em&gt;It’s chiefly a linguistic boundary.&lt;/em&gt; These contextual boundaries are a key to implementing DDD. [emphasis mine]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also appreciated the book’s emphasis on the primacy of focusing attention on the Core Domain, that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;part of the business domain that is of primary importance to the success of the organization. Strategically speaking, the business must excel with its Core Domain. It is of utmost importance to the ongoing success of the business. That project gets the highest priority, one or more domain experts with deep knowledge of that Subdomain, the best developers, and as much leeway and leverage as possible to give the close-knit team an unobstructed success path. Most of your DDD project efforts will be focused on the Core Domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in achieving this level of focus on the Core Domain, there is the possibility that teams may neglect Supporting and Generic subdomains, so &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;&#39;s advice in this respect is also timely:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being Supporting or Generic doesn’t mean unimportant. These kinds of Subdomains are important to the success of the business, yet there is no need for the business to excel in these areas. It’s the Core Domain that requires excellence in implementation, since it will provide distinct advantages to the business.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;balancing-understanding-with-practicality&quot;&gt;Balancing Understanding with Practicality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; asks the reader to apply learning to her own domain, by sketching out Bounded Contexts, identifying her own Core Domain and so on in her own team’s situation. Nothing beats practice when it comes to developing new skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the process of applying that new learning, the team is to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Include any relevant, high-level elements that will lead to vital team communication. On the other hand, push back when detail seems ceremonious.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, in my coaching I give similar advice to the following when a team tends to get “down in the weeds”:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Produce Context Maps that you can post on the wall. You can upload them to a team wiki as long as it’s not just the project’s attic where nobody ever goes. Keep discussions about the project flowing back to your Map to stimulate useful refinements&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is to balance the need to understand with practicality, and not pile too much detail into this level. Remember that we are likely not going to keep a very detailed graphical Map up to date far into the project. We’ll benefit most from what can be posted up on a wall, enabling team members to point at them during discussions. If we reject ceremony and embrace simplicity and agility, we’ll produce useful Context Maps that help us move forward rather than bog down the project&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ddd-and-pragmatic-architecture&quot;&gt;DDD and Pragmatic Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is regrettable that over the years DDD has somehow become more associated with overblown architectural approaches than with the strategic, lightweight collaborative modeling Eric Evans has always advocated. I&amp;#8217;ve even seen people &lt;a href=&quot;http://stackoverflow.com/questions/12982680/gave-up-ddd-but-need-some-of-its-benefits&quot;&gt;rejecting heavy-handed architectural approaches&lt;/a&gt; and calling them DDD, when what they are rejecting is not DDD at all but rather the burden of carrying extraneous infrastructure and layer plumbing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chapter four of &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; is targeted around architecture, and into our current climate of heavyweight, overblown and overengineered system architectural approaches, this chapter’s risk-driven and pragmatic approach to architecture blows a fresh breath of air:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avoiding architecture overuse is just as important as using it. Allowing real, genuine quality demands to drive what we do with architecture is a beneficial risk-driven approach. That way we use architecture only to mitigate the risk of failure, not to increase our risk of failure by using an architectural style that cannot be justified. Thus, we must be able to justify every architectural style in use, or we eliminate the style from our system.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The architectural chapter is comprehensive and dense, but very good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I found the best description of ports and adaptors approach that I have read. There is also a good description of CQRS, combined with practical guidance on when and where to apply it as an architectural organizing approach, and how it relates to event sourcing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-block-patterns&quot;&gt;Building Block Patterns&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of the next chapters covers one of the &quot;building block&quot; patterns of DDD in depth: entities, value objects, domain events, aggregates, factories and repositories. In each chapter &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; explains what the pattern is, when to use it, and various ways to apply it. The book is careful to cover the relative merits and downsides of each approach, and gives technical implementations that show - by example - how to adopt them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt;&#39;s distinction between collection-oriented and persistence-oriented repositories was very helpful, and the examples with how to apply these styles for a variety of common persistence stores, including MongoDB and Coherence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;application-guidance&quot;&gt;Application Guidance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the application chapter I would have liked to see more code samples for UI approaches, but I realize that this wish is unrealistic: presentation layer design is a massive topic on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an overwhelming and ever-changing diversity of frameworks, UI tooling and associated techniques, and there is only so much that can be included in such a book as this. &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; wisely lays out the various options and tradeoffs, guiding the reader towards making informed and judicious choices.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-pleasant-surprise&quot;&gt;A Pleasant Surprise&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Appendix A is an in-depth treatment of event sourcing, contributed by Rinat Abdullin. When I started the book I wasn&amp;#8217;t sure about why the appendix was there (asking myself, &quot;isn&amp;#8217;t this material covered already in the main text?&quot;), but it actually proved most helpful in understanding the mechanics, advantages and pitfalls of event sourcing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The event sourcing material here is a superb complement to the rest of the material, building on it in all the most important ways. This A+ES event sourcing chapter is the clearest and best description I’ve found on how event sourcing works. The coding examples provide expert cutting-edge guidance and tooling for getting an event store-based approach up and running quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say it, if it’s not already obvious: I’m a fan. &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; does a remarkable thing: it takes a sophisticated and substantial topic area in DDD and presentes it clearly, with nuance, fun and finesse. &lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;By the time you finish the book you will be able to begin applying all the important concepts of DDD, and then some.&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This book is written in an engaging and friendly style, like a trusted advisor giving you expert counsel on how to accomplish what is most important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I read, I found myself highlighting many sections, and will be getting a copy of &lt;em&gt;Implementing DDD&lt;/em&gt; for my bookshelf as soon as it is released. I will be referring back to it, and recommending it, often.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ddd-denver&quot;&gt;DDD Denver&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vaughn, Randy Stafford and I cofounded DDD Denver in April 2011. To join the meetup, go to the [our meetup home page](&lt;a href=&quot;http://bit.ly/ddd_denver&quot; class=&quot;bare&quot;&gt;http://bit.ly/ddd_denver&lt;/a&gt;). Most presentations at our meetup are recorded and posted online.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ddd-resources&quot;&gt;DDD Resources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For someone that wants to get up to speed with DDD there are a variety of complementary options. Firstly, those that want to explore on their own can find sample apps and an abundance of presentations and articles on the &lt;a href=&quot;http://dddcommunity.org&quot;&gt;DDD Community site&lt;/a&gt; and &lt;a href=&quot;http://www.infoq.com/domain-driven-design/&quot;&gt;InfoQ&lt;/a&gt;. There is also the &lt;a href=&quot;http://tech.groups.yahoo.com/group/domaindrivendesign/&quot;&gt;DDD mailing list&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/tagged/domain-driven-design&quot;&gt;Stack Overflow feed&lt;/a&gt;, and blog posts by a variety of knowledgeable individuals. Finally, if you want to get up-to-speed quickly then attend one of the excellent public &lt;a href=&quot;http://www.domainlanguage.com/training&quot;&gt;Domain Language DDD classes&lt;/a&gt;, designed by Eric Evans himself. These classes are offered through Domain Language and its training partners in New York City, Denver (i.e. me!), London, Paris, Oslo and Stockholm.  The classes are also available as onsite offerings if you want to get your whole team trained.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 01 Feb 2013 11:40:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/01/book-review-implementing-domain-driven-design/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/01/book-review-implementing-domain-driven-design/</guid>
        
        <category>DDD</category>
        
        <category>Reviews</category>
        
        
        <category>ddd</category>
        
        <category>reviews</category>
        
      </item>
    
  </channel>
</rss>
