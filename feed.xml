<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leading by Design</title>
    <description>Thinking about DDD, BDD, coding, software design and agile etc.</description>
    <link>http://thepaulrayner.com/</link>
    <atom:link href="http://thepaulrayner.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Jan 2015 14:31:22 +0000</pubDate>
    <lastBuildDate>Thu, 15 Jan 2015 14:31:22 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Lean Thinking and Software Design</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lean software development is a subset of Lean Product Development, not Lean Manufacturing. It is foolish to blindly apply Lean Manufacturing practices to software development. The underlying principles of value, flow, pull and waste remain the same, but the way these principles are applied to software development will look fundamentally different.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Successful software development is about building the right product at the right time for your customers. This means focusing attention on the right places in the portfolio of projects and products that your company provides, and optimizing the entire value stream from &quot;concept to cash&quot; for your customers and the development teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agility is so much more than just adopting Scrum or some other agile process framework. &lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Agility involves adopting a new set of values and principles&quot;&gt;&lt;/span&gt;Agility involves adopting a new set of values and principles, and then applying practices through the entire software development lifecycle and beyond in order to provide value to customers earlier and more often.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile software development should consist of frequent feedback loops, intense team collaboration, continuous improvement, business and customer involvement, baking quality in and consistent delivery of valuable software. These characteristics are derived from Lean disciplines that can transform software development work and the wider organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Paul Hodgetts points out in his excellent &lt;a href=&quot;http://www.agilelogic.com/files/LeanIsMoreWhitepaper.pdf&quot;&gt;Lean is More&lt;/a&gt; whitepaper:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Treating software development as Lean Manufacturing leads us down a path of optimizing the mechanics of developing software, which can yield limited benefits but fails to address the much larger software product development issues.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Paul Hodgetts&lt;br&gt;
&lt;cite&gt;Lean is More&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would put it even more strongly than this. Much of the work software developers do is invisible, particularly when it comes to the thinking involved with design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not about the mechanics of the process, any more than writing a song is about the mechanics of playing the instrument or enjoying a meal is about the nutritional content of the food. Such reductionism is a false hope for improvement. For example, seeking to create a more efficient process by reducing or eliminating design-related activities in software development as waste (such as design meetings, writing design documents, refactoring etc) will inevitably lead to a product with little conceptual integrity, and fast-track it towards becoming a Big Ball of Mud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Asking developers to track hours, rather than value delivered, as a measure of productivity is the fast-track to dysfunction and decreasing productivity. Let&amp;#8217;s not &lt;a href=&quot;http://alistair.cockburn.us/Taylorism+strikes+software+development&quot;&gt;reintroduce Taylorism to software development&lt;/a&gt; through the back-door of Lean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile methods were developed by assembling the best practices from successful projects. While the combinations of best practices found in agile methods exhibit the core values and principles of a lean approach, it can be difficult to understand the reasons why agile processes work just from examining their practices&amp;#8230;&amp;#8203;Mapping agile practices to lean concepts such as value, flow, pull and waste can help explain why agile works, and offer new insights to guide process improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Paul Hodgetts&lt;br&gt;
&lt;cite&gt;Lean is More&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see this more clearly we can look through at Kanban and Scrum the lens of lean and agile principles. Kniberg and Skarin, in &lt;a href=&quot;http://www.infoq.com/minibooks/kanban-scrum-minibook&quot;&gt;Kanban and Scrum: Making the Most of Both&lt;/a&gt;, point out that Scrum and Kanban are both aligned with the values and principles of both Lean and agile. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Scrum and Kanban are both pull scheduling systems, which corresponds to the JIT (Just in Time) inventory management principles of Lean. This means that the team chooses when and how much work to commit to, they &quot;pull&quot; work when they are ready, rather than having it &quot;pushed&quot; in from the outside. Just like a printer pulls in the next page only when it is ready to print on it (although there is a small and limited batch of paper that it can pull from).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scrum and Kanban are based on continuous and empirical process optimization, which corresponds to the Kaizen principles of Lean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scrum and Kanban emphasize responding to change over following a plan (although Kanban allows faster response than Scrum), one of the four values of the agile manifesto.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Henrik Kniberg &amp; Mattias Skarin&lt;br&gt;
&lt;cite&gt;Kanban and Scrum: Making the Most of Both&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the batch sizes in Scrum are much larger (batching work into timeboxed iterations) and thus likely to not be as lean as Kanban, producing shippable code every 2 weeks is certainly much leaner than a more traditional process which might integrate and release something 2-4 times per year. The shorter you make the iteration, the more you are approaching Kanban.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a DDD practitioner, one area where I think the careful application of Lean thinking holds a great deal of promise is in strategic design:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile and lean are not in conflict with each other as they may seem at first glance, nor are they incompatible approaches to process improvement&amp;#8230;&amp;#8203; Lean Product Development offers several strategies and practices that can supplement agile methods, particularly in areas where agile methods have been criticized as lacking&amp;#8230;&amp;#8203;the strategy of set-based design offers a balanced alternative to heavyweight up-front design approaches on one hand, and reactive, emergent approaches on the other.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Paul Hodgetts&lt;br&gt;
&lt;cite&gt;Lean is More&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many teams feel that they constantly have to adopt expedient design approaches to meet Sprint deadlines, but Lean thinking combined with strategic DDD frees the team to focus their design work where it matters most. &lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Lean thinking combined with strategic DDD frees the team to focus their design work where it matters most.&quot;&gt;&lt;/span&gt; This is for the competitive advantage of their business. It encourages them to reduce the amount of code they write themselves, cultivate domain knowledge, and explore models collaboratively with the business to maximize the potential to develop innovative custom software solutions that leap ahead of the competition in the marketplace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about Lean Software Development, I highly recommend &lt;a href=&quot;http://www.amazon.com/gp/product/0321437381/&quot;&gt;Implementing Software Development&lt;/a&gt; by Mary and Tom Poppendieck.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 15 Jan 2015 14:30:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/lean-thinking-and-software-design</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/lean-thinking-and-software-design</guid>
        
        <category>Lean</category>
        
        <category>Agile</category>
        
        <category>Design</category>
        
        
      </item>
    
      <item>
        <title>Aggregates &amp; Entities in Domain-Driven Design</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some thoughts on distinctions between aggregates and entities in domain-driven design (DDD), in response to some good questions &lt;a href=&quot;https://twitter.com/hbrumleve&quot;&gt;Harry Brumleve&lt;/a&gt; asked me via email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the relevant content from the email:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;I&#39;ve always had problems with Aggregates vs. Entities.

Is it that Agg&#39;s are transactional boundaries that expose behaviors (methods) that the entities they contain may perform?

Entity is a business concept that exposes behavior.

A collection of entities may have different behavior varied upon the type of aggregate that encapsulates it?

Or is it that Agg Root = Entity and it&#39;s an arbitrary naming of the same concept?

Or is this over-thinking it?&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s use the typical example of a purchase order (PO) and its line items. How you might model this as entities and value objects? And is there an aggregate concept lurking in there?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-concrete-example&quot;&gt;A Concrete Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve done this in the past as Purchase Order being an entity, since &lt;em&gt;it has identity and a lifecycle&lt;/em&gt;. The lifecycle could be modeled as object state or as an event stream - it doesn&amp;#8217;t matter for our purposes here. The line items would likely be value objects, since its their properties that probably matter more than trying to preserve identity over time for them. There may need to be other objects associated with the PO, but let&amp;#8217;s keep it simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/po-example-aggregate.png&quot; alt=&quot;PO Example&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Two purchase orders, the 2nd one with multiple line items&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say your company needs to create a purchase order for an 4 day agile workshop class, because creating purchase orders for training is how they roll. Using the model I described, you would have a single Purchase Order and one Line Item for the class. Unlike the agile classes I teach, which are one inclusive price,  other companies offering training and coaching might want to break out the costs to rent a venue, pay for catering, cover instructor travel expenses, coaching days etc. So purchase orders would need to handle multiple line items in many cases. This is fairly standard for POs anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aggregates-support-higher-level-concepts&quot;&gt;Aggregates Support Higher Level Concepts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The business could work with LineItems individually, but in practice never would, since they only really make sense in light of their PurchaseOrder. And you would mostly likely want to work with the higher-level concept of Purchase Orders rather than always having to deal at the granularity of the Line Items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If someone was to approve Purchase Order with ID=XYZ124, they would typically be approving all its Line Items as well. I could imagine business rules for certain types of Purchase Orders that the sum of the values of the individual Line Items could not exceed a certain amount for the Purchase Order to be approved. A Purchase Order would probably need to have at least one Line Item to be valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a case of two or more objects that seem to belong together most of the time in terms of how you need to work with them. So treat PO as an &lt;em&gt;aggregate&lt;/em&gt; of the PO entiity and the Line Item value objects. And make the PO entity the root of the aggregate.  So what we have in this example is an aggregate consisting of a single entity, the Purchase Order (functioning as the &lt;em&gt;root&lt;/em&gt; of the aggregate), and a set of one or more associated Line Item value objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aggregates-invariants-and-consistency&quot;&gt;Aggregates, Invariants and Consistency&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This aggregate boundary is part of the model, and allows us to enforce invariants (e.g. having at least one Line Item) for the PO aggregate. Between POs we can have eventual consistency, since we are comfortable with not trying to keep all our aggregates in sync with each other. We can update the PO with ID=XYZ124 and then update another related PO with ID=ABC432 separately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of how this plays out, you would typically have a repository for persisting and retrieving the PO aggregates. When you get a PO from its repository, it would be created whole, with all its Line Items as well. As an aside, this is what makes document stores a nice fit for aggregates, since aggregate and document boundaries often tend to align in terms of how a model is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I realize none of what I&amp;#8217;ve written above is directly answering your questions, but it always helps me to try to have a concrete example to discuss. In a particular model, I&amp;#8217;ve typically only had each entity be part of one aggregate. But that may be because I haven&amp;#8217;t seen a domain yet where the model needed anything more complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For background reading, see the &lt;a href=&quot;http://domainlanguage.com/ddd/reference/DDD_Reference_2011-01-31.pdf&quot;&gt;DDD Reference&lt;/a&gt; book, especially pp. 18, 19 and 24.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aggregate-boundaries-and-behavior&quot;&gt;Aggregate Boundaries and Behavior&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;I love concrete examples. This actually demonstrates my confusion between Aggregates and Root Entities.

I obviously need to think this out _a lot more_, but I&#39;ve always felt like the diagram you&#39;ve sent has aggregates in the wrong spot. Namely, that aggregates represent a collection of behaviors that are transactionally bound and express the domain model.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can see how you might define an aggregate this way, and I think it&amp;#8217;s a valid way to conceptualize them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;The entities make up the design and implementation of an aggregate&#39;s behaviors; since they are encapsulated within aggregates,&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would rather have most of the behaviors tied to value objects rather than entities. One of the things I&amp;#8217;d encourage is to keep entities free of behavior where possible, since identity is already a big burden to bear, and have behavior expressed in the value objects. So as more behavior needs to be added to this PO, I would try to model that as behaviors on new or existing value objects where possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;How they contribute to the make up of the aggregate&#39;s composition is arbitrary and not important to the domain outside of the aggregate&#39;s context.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Arbitrary and not important&quot; might be a little too strong a statement for me. I&amp;#8217;d need an example of where this would be the case. However, generally speaking, I think you&amp;#8217;re correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Additionally, I feel that an Aggregate Root concept is a vestigial idea posited by Eric to appease some OO or implementation concern. :-) That may just be me being cheeky, though.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Possibly. I&amp;#8217;ve not implemented a system using CQRS, which takes aggregates in a different and interesting direction from what Eric originally proposed. I find the aggregate root concept helpful though, since a single entity typically takes that responsibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aggregate-boundaries-and-refining-the-model&quot;&gt;Aggregate Boundaries and Refining the Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;To your point, if entities aren&#39;t used across aggregate types, aren&#39;t you really using the behaviors of the aggregates to express your model and the entities to express the arbitrary design of a particular aggregate?&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, if I understand you correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a concrete example, a PO has several behaviors that may not change as a training organization moves from inferiority to not-as-optimal. The design and implementation may currently consider entities like &quot;Location Rental&quot; or &quot;Travel Expenses&quot; to express the PO model; but after maturity of the model and company they choose to represent their line items more succinctly or with less inferior concepts. The entities will change, or yield to new entity concepts, but the PO aggregate&amp;#8217;s boundary stays in tact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aggregate boundaries may, and likely will, change over time as the model matures. That&amp;#8217;s assuming the team is practicing iterative design and growing their model as their understanding grows. Maybe the team realizes that Location Rental needs to be its own aggregate, for example. And if a PO is canceled then the Location Rental needs to be canceled too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To your point, though, the entities, value objects and domain events inside the aggregate could potentially change without affecting the aggregate boundary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Is the answer to my conundrum &quot;it depends&quot; &amp;amp; &quot;do what&#39;s best for your organization&quot;? :-)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Always! :) That being said, there&amp;#8217;s clearly some nuance here and probably the need to sketch out some ideas on napkins to clarify each other&amp;#8217;s thinking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby/blob/master/domain/cargo/cargo.rb&quot;&gt;the Cargo aggregate&lt;/a&gt; in the Ruby DDD sample app for a half-decent example. Cargo is the aggregate root, with several value objects handling the business rules. Delivery essentially functions as a read projection of the Handling Event history. Cargo is focused on identity and not much else. All the interesting business logic is in the value objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 13 Jan 2015 15:21:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/aggregates-and-entities-in-domain-driven-design</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/aggregates-and-entities-in-domain-driven-design</guid>
        
        <category>DDD</category>
        
        <category>Coding</category>
        
        
      </item>
    
      <item>
        <title>Agile and FDA-Regulated Medical Device Software Development Resources</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a (lightly) annotated list of online resources available dealing with adopting and applying agile practices when developing FDA-regulated medical device software. This list will be updated as new resources are discovered or become available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph left&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://my.aami.org/store/detail.aspx?id=TIR45&quot;&gt;&lt;img src=&quot;/assets/aami_tir45.png&quot; alt=&quot;AAMI TIR45:2012 Cover&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The definitive work is now &lt;a href=&quot;https://my.aami.org/store/detail.aspx?id=TIR45&quot;&gt;AAMI TIR45:2012&lt;/a&gt;, a technical information report created by the AAMI to provide guidance on the use of agile practices in the development of medical device software. It is currently $150 to download a pdf ($90 for AAMI members). You can also &lt;a href=&quot;http://marketplace.aami.org/eseries/scriptcontent/docs/Preview%20Files/TIR45_1208_preview.pdf&quot;&gt;download a preview&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://agile2009.agilealliance.org/files/session_pdfs/Moving%20to%20Agile%20in%20an%20FDA%20Environment.pdf&quot;&gt;Moving to Agile in an FDA Environment
An Experience Report&lt;/a&gt; - Agile 2009 presentation for Abbott. See also &lt;a href=&quot;http://www.computer.org/csdl/proceedings/agile/2009/3768/00/3768a151-abs.html&quot;&gt;IEEE article&lt;/a&gt;, which requires payment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://ronrammage.wordpress.com/2010/11/06/agile-medical-device-software-development/&quot;&gt;Agile Medical Device Software Development?&lt;/a&gt; - Published Nov 6, 2010 on Ron Rammage&amp;#8217;s Blog&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://rdn-consulting.com/blog/2013/09/23/fda-regulation-of-mobile-medical-apps/&quot;&gt;FDA Regulation of Mobile Medical Apps&lt;/a&gt; - Published September 23, 2013 on Bob on Medical Device Software Blog&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://rdn-consulting.com/blog/2010/10/16/agile-software-development-in-regulated-environments/&quot;&gt;Agile Software Development in Regulated Environments&lt;/a&gt; - Published October 16, 2010 on Bob on Medical Device Software Blog&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://scalingsoftwareagilityblog.com/software-verification-and-validation-in-high-assurance-agile-development-verification/&quot;&gt;Software Verification and Validation in High Assurance Agile Development: Verification: SRS and User Stories&lt;/a&gt; - Published December 17, 2010 by Dean Leffingwell. Has good notes from Brian Shoemaker in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other resources, yet to be annotated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://users.encs.concordia.ca/~abdelw/sba/papers/SERA10-FDAToXP.pdf&quot; class=&quot;bare&quot;&gt;http://users.encs.concordia.ca/~abdelw/sba/papers/SERA10-FDAToXP.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mddionline.com/article/fda-endorses-agile-what-does-mean&quot; class=&quot;bare&quot;&gt;http://www.mddionline.com/article/fda-endorses-agile-what-does-mean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.academia.edu/1871584/Barriers_to_Adopting_Agile_Practices_when_Developing_Medical_Device_Software&quot; class=&quot;bare&quot;&gt;http://www.academia.edu/1871584/Barriers_to_Adopting_Agile_Practices_when_Developing_Medical_Device_Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;agile-traceability&quot;&gt;Agile Traceability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/news/2008/06/agile-traceability-matrix&quot;&gt;Traceability Matrix in an Agile Project - InfoQ&lt;/a&gt;
&lt;a href=&quot;http://pagilista.blogspot.com/2012/07/requirements-traceability-in-agile.html&quot; class=&quot;bare&quot;&gt;http://pagilista.blogspot.com/2012/07/requirements-traceability-in-agile.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.agilemodeling.com/essays/agileRequirementsBestPractices.htm&quot;&gt;Agile Requirements Best Practices&lt;/a&gt; - Scott Ambler&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2015/01/12/agile-and-fda-regulated-medical-device-software-development-resources/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2015/01/12/agile-and-fda-regulated-medical-device-software-development-resources/</guid>
        
        <category>Agile</category>
        
        <category>FDA</category>
        
        
      </item>
    
      <item>
        <title>Refreshing Your Site&#39;s Favicon</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What do you do when you&amp;#8217;ve updated the &lt;code&gt;favicon.ico&lt;/code&gt; file on your server, but your browser is still showing the old one? It&amp;#8217;s probably browser caching issue, so if you need to do a local refresh, look no further (see below if it&amp;#8217;s actually a server issue). This post will teach you how to force a favicon refresh, using a technique that works locally and doesn&amp;#8217;t require code changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is based on one of the answers to the Stack Overflow question &lt;a href=&quot;http://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh&quot;&gt;How do I force a favicon refresh&lt;/a&gt;? Last time I had to do this for a Rails app my Google-fu was apparentely too week to find the answer, so I&amp;#8217;m posting the solution for next time I have to do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve updated &lt;code&gt;favicon.ico&lt;/code&gt;, which lives in &lt;code&gt;/public&lt;/code&gt; for a Rails app, the two simple steps are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Type in &lt;code&gt;www.yoursite.com/favicon.ico&lt;/code&gt; for the browser URL and press Enter &amp;#8592; where &lt;code&gt;www.yoursite.com&lt;/code&gt; is the URL for your app, which could be something like &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press Ctrl+f5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now when you navigate to the URL for your website the &lt;code&gt;favicon.ico&lt;/code&gt; icon which shows in the browser tab should be the new one. Works for me!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should be able to force browsers to download a new version using the link tag and a querystring on your filename, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;http://www.yoursite.com/favicon.ico?v=2&quot; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is especially helpful in production environments to make sure your users get the update. If this still doesn&amp;#8217;t work, you might want to look at &lt;a href=&quot;http://stackoverflow.com/questions/1077041/refresh-image-with-a-new-one-at-the-same-url&quot;&gt;context expiration of some kind&lt;/a&gt;. You may still need to use the technique above to get your local browser to update though.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2015/01/12/Refreshing-Your-Sites-Favicon/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2015/01/12/Refreshing-Your-Sites-Favicon/</guid>
        
        <category>Coding</category>
        
        <category>Rails</category>
        
        
      </item>
    
      <item>
        <title>Build Jekyll-Based Blogs &amp;amp; Websites with AsciiDoc</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Announcing the release of &lt;a href=&quot;https://github.com/asciidoctor/jekyll-asciidoc&quot;&gt;jekyll-asciidoc&lt;/a&gt;, a &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; plugin that converts AsciiDoc files in your site source to HTML pages using &lt;a href=&quot;http://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt;.
&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Start writing your web content in Jekyll using all the richness and clarity of AsciiDoc.&quot;&gt;&lt;/span&gt;
The jekyll-asciidoc gem was written by Dan Allen (&lt;a href=&quot;https://twitter.com/mojavelinux&quot;&gt;@mojavelinux&lt;/a&gt;) and I have &lt;a href=&quot;https://rubygems.org/gems/jekyll-asciidoc&quot;&gt;published the release 1.0.0 version to RubyGems&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jekyll is a simple, blog-aware, static site generator, enabling you to convert plain text content into static websites and blogs. Until recently, Jekyll only supported &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; (or &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;) formatted content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/blog/1939-how-github-uses-github-to-document-github&quot;&gt;How GitHub uses GitHub to document GitHub&lt;/a&gt; announced:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jekyll 2.0 introduced a new plugin type called a &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#converters&quot;&gt;Converter&lt;/a&gt; that transforms any markup into HTML. This frees the writer up to compose content however she chooses, and Jekyll will just serve the final HTML. For example, you can write your posts in AsciiDoc, if that&amp;#8217;s your thing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, that &lt;em&gt;is&lt;/em&gt; my thing. This post is actually written in AsciiDoc and is being rendered using jekyll-asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph dropshadow&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://rubygems.org/gems/jekyll-asciidoc&quot;&gt;&lt;img src=&quot;/assets/jekyll-asciidoc_rubygems.png&quot; alt=&quot;jekyll-asciidoc gem on RubyGems&quot; width=&quot;400&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
GitHub doesn’t (yet) whitelist the AsciiDoc plugin, so you can only run it on your own machine. I set up a Travis CI job to automate publishing of this site to GitHub Pages.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s the actual AsciiDoc content for this blog post. You can see the original file in &lt;a href=&quot;https://github.com/paulrayner/paulrayner.github.com/blob/jekyll/_posts/2015-01-05-jekyll-asciidoc-gem-published.adoc&quot;&gt;my website source repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;2015-01-05-jekyll-asciidoc-gem-published.adoc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;asciidoc&quot;&gt;---
tags:
- AsciiDoc
- Jekyll
excerpt: The jekyll-asciidoc gem has now been released and is available for download at RubyGems. Get it now, and add the richness of AsciiDoc markup to your Jekyll static site generation.
---
:title: Build Jekyll-Based Blogs &amp;amp; Websites with AsciiDoc
:layout: post
:date: 2015-01-05 11:40
:comments: true
:sharing: true


Announcing the release of https://github.com/asciidoctor/jekyll-asciidoc[jekyll-asciidoc], a http://jekyllrb.com/[Jekyll] plugin that converts AsciiDoc files in your site source to HTML pages using http://asciidoctor.org[Asciidoctor].
q:&amp;gt;[Start writing your web content in Jekyll using all the richness and clarity of AsciiDoc.]
The jekyll-asciidoc gem was written by Dan Allen (https://twitter.com/mojavelinux[@mojavelinux]) and I have https://rubygems.org/gems/jekyll-asciidoc[published the release 1.0.0 version to RubyGems].


Jekyll is a simple, blog-aware, static site generator, enabling you to convert plain text content into static websites and blogs. Until recently, Jekyll only supported http://daringfireball.net/projects/markdown/[Markdown] (or http://redcloth.org/textile[Textile]) formatted content.

https://github.com/blog/1939-how-github-uses-github-to-document-github[How GitHub uses GitHub to document GitHub] announced:

[quote]
____
Jekyll 2.0 introduced a new plugin type called a http://jekyllrb.com/docs/plugins/#converters[Converter] that transforms any markup into HTML. This frees the writer up to compose content however she chooses, and Jekyll will just serve the final HTML. For example, you can write your posts in AsciiDoc, if that&#39;s your thing.
____

Yes, that _is_ my thing. This post is actually written in AsciiDoc and is being rendered using jekyll-asciidoc.

[.dropshadow]
image:/assets/jekyll-asciidoc_rubygems.png[jekyll-asciidoc gem on RubyGems, 400, link=&amp;quot;https://rubygems.org/gems/jekyll-asciidoc&amp;quot;]

TIP: GitHub doesn’t (yet) whitelist the AsciiDoc plugin, so you can only run it on your own machine. I set up a Travis CI job to automate publishing of this site to GitHub Pages.

Here&#39;s the actual AsciiDoc content for this blog post. You can see the original file in https://github.com/paulrayner/paulrayner.github.com/blob/jekyll/_posts/2015-01-05-jekyll-asciidoc-gem-published.adoc[my website source repository on GitHub].....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Updated 2015/1/12&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The jekyll-asciidoc plugin is now included as an official plugin in the list of Converters on the &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;Jekyll plugins page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;&lt;img src=&quot;/assets/jekyll-asciidoc-official.png&quot; alt=&quot;jekyll-asciidoc gem on Jekyll documentation plugins list&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2015/01/05/jekyll-asciidoc-gem-published/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2015/01/05/jekyll-asciidoc-gem-published/</guid>
        
        <category>AsciiDoc</category>
        
        <category>Jekyll</category>
        
        
      </item>
    
      <item>
        <title>Domain-Driven Design in Ruby at DDD Exchange 2013 in London</title>
        <description>&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Leonardo_-_St._Anne_cartoon-alternative-downsampled.jpg/178px-Leonardo_-_St._Anne_cartoon-alternative-downsampled.jpg!&quot; alt=&quot;Burlington House Cartoon&quot; width=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week when I was in London I came across Leonardo DaVinci&amp;#8217;s drawing, &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Virgin_and_Child_with_St_Anne_and_St_John_the_Baptist&quot;&gt;The Virgin and Child with St Anne and St John the Baptist&lt;/a&gt;, while wandering the National Gallery in London. It&amp;#8217;s also known as &lt;em&gt;The Burlington House Cartoon&lt;/em&gt; because drawings of this sort were usually transferred to a board for painting by pricking or incising the outline. With this cartoon, this has not been done, suggesting that the drawing has been kept as a work of art in its own right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I see a sample app as functioning like this cartoon. It&amp;#8217;s not a complete system, and is not intended to be prescriptive in any way. Rather, it is an along-the-way artifact created to learn. It&amp;#8217;s a point-in-time snapshot of a much deeper, largely invisible, learning process, and thus is incomplete in that way too. When the sample app is done, it can function as a teaching tool, as a guide on the way to building something real. As a conversation starter and tradeoff clarifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last Friday I presented at the &lt;a href=&quot;http://skillsmatter.com/event/design-architecture/dddx-2013&quot;&gt;DDD Exchange 2013&lt;/a&gt; hosted by Skills Matter in London on what I&amp;#8217;ve learned recently in exploring doing domain-driven design (DDD) in Ruby. The way I approached this exploration was to start porting the DDD sample app from Java and C# to Ruby. I wanted to do this because it would give me an opportunity to go much deeper in Ruby than every before, while applying DDD concepts and techniques I was familiar with in some unfamiliar ways using new tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started the port to Ruby back in early May, and presented my early findings to an encouraging audience at DDD Denver on May 13. At that point I had only the domain model objects and some of the Rspec tests in place. Much of my time had been taken with investigating how best to implement value objects, and possible different approaches for the UI and for how to tackle enabling eventual consistency between aggregates. I had only begun to work out how to handle persistence with MongoDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I gave the DDD Denver presentation, I was very nervous about presenting such an incomplete effort in public. But I found everyone to be very supportive and it inspired me to keep going. In the next four weeks I was able to solve all the big issues and prepare a presentation for DDD Exchange 2013. If you are interested, Skills Matter did an excellent job of recording the presentation and getting it online. See below for links to resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My hope is that this - currently very unfinished and unpolished - effort sparks interesting conversations about options, tradeoffs and possibilities, and helps others get to grips with the details of how to make DDD real on their projects.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Original slides for today&amp;#39;s &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; 2013 talk Domain-Driven Design with Ruby are now online at &lt;a href=&quot;http://virtual-genius.com/presentations/ddd_with_ruby_20130614&quot;&gt;http://t.co/w9W3wvNz1J&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23DDDesign&amp;amp;src=hash&quot;&gt;#DDDesign&lt;/a&gt;&lt;/p&gt;&amp;mdash; Paul Rayner (@thepaulrayner) &lt;a href=&quot;https://twitter.com/thepaulrayner/statuses/345538141706412032&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a list of resources related to my presentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://virtual-genius.com/presentations/ddd_with_ruby_20130614.html&quot;&gt;Original presentation slides&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://skillsmatter.com/podcast/design-architecture/paul-rayner/mh-7679&quot;&gt;Video of the presentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/paulrayner/ddd_sample_app_ruby&quot;&gt;Sample app on Github&lt;/a&gt; - see the README for a comprehensive list of resources I&amp;#8217;ve compiled as I&amp;#8217;ve researched how to accomplish the Ruby port (including links to the Java and C# apps the port is based on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big thank you again to Skills Matter for hosting such a wonderful event and making it such a special day (for both me and my son).&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Many thanks to all of today&amp;#39;s speakers: &lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;@unclebobmartin&lt;/a&gt; &lt;a href=&quot;https://twitter.com/robsmallshire&quot;&gt;@robsmallshire&lt;/a&gt; &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; &lt;a href=&quot;https://twitter.com/zimakki&quot;&gt;@zimakki&lt;/a&gt; You guys are awesome! &lt;a href=&quot;https://twitter.com/search?q=%23DDDx&amp;amp;src=hash&quot;&gt;#DDDx&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23FF&amp;amp;src=hash&quot;&gt;#FF&lt;/a&gt; (2/2)&lt;/p&gt;&amp;mdash; skillsmatter (@skillsmatter) &lt;a href=&quot;https://twitter.com/skillsmatter/statuses/345596880899682304&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;##Tweets&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Cargo sample is back in ruby ! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jérémie Chassaing (@thinkb4coding) &lt;a href=&quot;https://twitter.com/thinkb4coding/statuses/345489374517006336&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Good session by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about DDD with Ruby &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Nathan Gloyn (@NathanGloyn) &lt;a href=&quot;https://twitter.com/NathanGloyn/statuses/345499135933308928&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; talk about ruby at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; gave me some interesting ideas to explore. Great talk !&lt;/p&gt;&amp;mdash; Thomas Jaskula (@tjaskula) &lt;a href=&quot;https://twitter.com/tjaskula/statuses/345497941353570305&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; really rocked. Cleared away so much fog and sparkled a lot of cool ideas! Thanks! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; ziobrando (@ziobrando) &lt;a href=&quot;https://twitter.com/ziobrando/statuses/345497521143029760&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Really, REALLY interesting session by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about doing DDD in Ruby &lt;a href=&quot;https://twitter.com/search?q=%23DDDX&amp;amp;src=hash&quot;&gt;#DDDX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tom Janssens (@ToJans) &lt;a href=&quot;https://twitter.com/ToJans/statuses/345492748020887552&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Good idea to show the project directory tree to show how to apply DDD with Rails/MongoDB/Mongoid by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; cyrille martraire (@cyriux) &lt;a href=&quot;https://twitter.com/cyriux/statuses/345495156864200706&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; explaining how he did an hexagonal arch in rails application, really nice and clean  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rui Carvalho (@rhwy) &lt;a href=&quot;https://twitter.com/rhwy/statuses/345494558446063616&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Looks like Ruby on Rails smackdown here between activerecord pattern and domain driven pattern. Who will win? &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; DCU CoderDojo (@coderdojodcu) &lt;a href=&quot;https://twitter.com/coderdojodcu/statuses/345496157423812608&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Actors are back in &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; ruby presentation...&lt;/p&gt;&amp;mdash; Jérémie Chassaing (@thinkb4coding) &lt;a href=&quot;https://twitter.com/thinkb4coding/statuses/345495764119732224&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Domain driven design with &lt;a href=&quot;https://twitter.com/search?q=%23ruby&amp;amp;src=hash&quot;&gt;#ruby&lt;/a&gt;  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; &lt;a href=&quot;http://t.co/FMHMtgI1hX&quot;&gt;pic.twitter.com/FMHMtgI1hX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rui Carvalho (@rhwy) &lt;a href=&quot;https://twitter.com/rhwy/statuses/345488522964238336&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;As an exercise, I think I’ll be reimplementing in Python the &lt;a href=&quot;https://twitter.com/search?q=%23dddesign&amp;amp;src=hash&quot;&gt;#dddesign&lt;/a&gt; Ruby sample presented by &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href=&quot;https://twitter.com/robsmallshire/statuses/345498791186673664&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Had a good talk during the break with &lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; about evangelising &lt;a href=&quot;https://twitter.com/search?q=%23DDDesign&amp;amp;src=hash&quot;&gt;#DDDesign&lt;/a&gt; in dynamic languages like ruby and php  &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mathias Verraes (@mathiasverraes) &lt;a href=&quot;https://twitter.com/mathiasverraes/statuses/345578077138608128&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thepaulrayner&quot;&gt;@thepaulrayner&lt;/a&gt; talk at &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23ruby&amp;amp;src=hash&quot;&gt;#ruby&lt;/a&gt; &lt;a href=&quot;http://t.co/ryycPIso6k&quot;&gt;pic.twitter.com/ryycPIso6k&lt;/a&gt;&lt;/p&gt;&amp;mdash; Thomas Jaskula (@tjaskula) &lt;a href=&quot;https://twitter.com/tjaskula/statuses/345489563344572416&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I just have to include this one&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Breaking News! Holy Camelshit! Is really possible to apply DDD with Rails! &lt;a href=&quot;https://twitter.com/search?q=%23dddx&amp;amp;src=hash&quot;&gt;#dddx&lt;/a&gt;&lt;/p&gt;&amp;mdash; DDD Borat (@DDD_Borat) &lt;a href=&quot;https://twitter.com/DDD_Borat/statuses/345497300921090048&quot;&gt;June 14, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</description>
        <pubDate>Thu, 20 Jun 2013 11:28:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/06/20/domain-driven-design-in-ruby-at-ddd-exchange/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/06/20/domain-driven-design-in-ruby-at-ddd-exchange/</guid>
        
        <category>DDD</category>
        
        
        <category>ddd</category>
        
      </item>
    
      <item>
        <title>Succeeding with DDD - Documentation</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m often asked about what teams doing Domain-Driven Design (DDD) should do in the way of documentation. The question &lt;a href=&quot;http://stackoverflow.com/questions/16284767/what-types-of-written-design-documents-are-used-in-ddd-projects&quot;&gt;What types of Written Design Documents are used in DDD projects?&lt;/a&gt; came up on Stack Overflow and I started to write a response, but realized it was getting way too long to post there. So here it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to documentation, we need to begin with the end in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need
to understand why we are writing it in the first place: What purpose is each
document intending to serve?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem with a lot of documentation is that it is seen as an end in
itself, rather than a means to an end, which is to deliver a quality product
that meets an important customer need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is why agile teams adopt the value of &quot;working software over comprehensive documentation.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, documentation serves a number of important, and different, purposes.
For each documentation artifact, ask: &quot;Is this artifact to support the team
now as it develops the software, or is it to support future development?&quot;
Depending on the answer to this question, approach the documentation in a
different way. Let&amp;#8217;s start with supporting future development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem-of-tribal-mythology&quot;&gt;The Problem of Tribal Mythology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jason Smith in &lt;a href=&quot;http://www.amazon.com/Elemental-Design-Patterns-Jason-Smith/dp/0321711920&quot;&gt;Elemental Design Patterns&lt;/a&gt; says the following about kinds of
documentation supporting future development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know we should document our software; we know we should keep it up to
date; we know we should commit to pen or screen the whys, the hows, and the
reasons; but we also know it is a pain. It really is, so we don’t do it. What
we have instead is a body of knowledge that is locked within the heads of
developers, that is passed along in fits and spurts, when prompted and only
where necessary, frequently without any comprehensive framework of common
understanding among stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Jason points out, Grady Booch has popularized the phrase “tribal knowledge”
for this kind of information artifact. Documenting for the future preserves
the oral tradition by encoding knowledge that already exists. It supports the
later transmission, socializing and sustainability of the &quot;tribal knowledge&quot;
of the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So one type of documentation we create supports future development by
preserving the oral tradition that teams develop along with the software.
Without this kind of documentation &quot;&amp;#8230;&amp;#8203;the collected tribal knowledge degrades
into “tribal mythology” (Booch). When this happens, no one really knows how
the system ended up the way it has, and the knowledge is lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This kind of supporting, future-facing documentation is particularly relevant
where such knowledge is not immediately apparent by reading the code,
supporting tests and other artifacts. Such documentation is typically
written after features/modules are implemented/delivered. It can be produced
as the software is being built, but then there is the additional maintenance
cost of keeping it up-to-date as things change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preserving-tribal-wisdom&quot;&gt;Preserving Tribal Wisdom&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we want to avoid tribal mythology by documenting our systems as necessary.
We want to capture and preserve for people to come the &quot;tribal wisdom&quot; that
has been gained in the rough-and-tumble of developing the system. As Jason
points out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tribal wisdom, however, is the virtuous flip side of this tribal mythology.
It is prescribed action with understanding, how accompanied by why, and is
adaptable to new environments, new situations, and new problems. It transcends
rote copying, and provides illumination through a comprehensive discussion of
the reasons behind the action.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jason Smith&lt;br&gt;
&lt;cite&gt;Elemental Design Patterns&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point in the past, for almost every
action or decision in a system, someone knew why it was done that way.
Carrying those decisions forward, even the small ones, can be critical. Small
decisions accrete into large systems, and small designs build into large
designs. By ensuring that we have a strong tradition of knowledge retention
that facilitates understanding, we build a tradition of tribal wisdom.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Jason Smith&lt;br&gt;
&lt;cite&gt;Elemental Design Patterns&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;favor-documenting-over-documentation&quot;&gt;Favor Documenting over Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we support future development by preserving tribal wisdom through
documentation, but what about supporting the team as they develop the product?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the same sense that agile teams favor planning over following a plan, they
tend to favor documenting (as an ongoing, just-in-time, activity) over
creating a (once-and-for all) document. And in the same manner that their
planning is focused around high-fidelity communication, customer collaboration
and team interaction, any documenting they do tends to have the same goals and
characteristics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A plan is only useful until it needs to change, which is why agile teams focus
on enabling and responding to change. The intention is the same with any
documentation they create in service to building a software solution - it
should not be painful, but rather serve the team in better understanding the
problem space, and helping the team grasp what the solution needs to look
like. Let&amp;#8217;s look at some important characteristics of this style of
documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;characteristics-of-useful-documentation&quot;&gt;Characteristics of Useful Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;trustworthy&quot;&gt;Trustworthy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should have to go without saying but, like comments in code, much of the
documentation that exists cannot be trusted. If you have documents that are
supporting your development, make them living documents by keeping them up to
date. They must be correct. They must speak the truth about the software and
the business domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;malleable&quot;&gt;Malleable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of keeping documents trustworthy is enabling change. Documentation must
be malleable - make it as easy to change as possible. Reduce the friction of
having to change it. Documentation that is burdensome to change is less likely
to be kept up-to-date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Makeing it malleable typically means making it as lightweight and informal as
possible. Prefer hand-drawn diagrams over created in a tool (such as Visio),
prefer electronic over hard-copy. Only include the pertinent details. Indicate
which things are tentitive, and which may be harder to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important thing is to understand the purpose of each document, and ensure
that it is kept up to date. As much as possible, push the knowledge into the
code and the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accessible&quot;&gt;Accessible&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation must be as accessible as necessary. Things that the team is
working on right now, I would expect to be on the walls of the team area. Just
the same as many teams use information radiators such as burndown charts and
task boards to track their delivery progress, I like to see sketches of design
diagrams on the walls too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to see a context map on the wall, showing the terrain the team is
dealing with. I&amp;#8217;ve worked with many teams that were not co-located, so we
would put the the documents in shared folders, and on the wiki. Sometimes we
would sketch on a whiteboard, and then take a photo of the diagram and put it
on the team wiki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t let your wiki fall prey to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Tragedy_of_the_commons&quot;&gt;Tragedy of the Commons&lt;/a&gt;. Appoint a curator for your documents if necessary. But strive for team-ownership of the documentation, just as you strive for team ownership of the
code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation-and-doing-ddd&quot;&gt;Documentation and Doing DDD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DDD teams often find they have a leg-up with documentation, because they
devote so much effort to distilling domain knowledge into the software itself
via the domain model. Teams doing DDD are focused capturing the essence of the
critical concepts of the core domain in the domain model &lt;em&gt;itself&lt;/em&gt;. With DDD
the rules, reasoning, assumptions and key business concepts are embedded in
the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I start with a team, the first thing we draw together is a context map.
This diagram helps set them up for success in terms of knowing what context
they are working in, how it relates to their core domain and the other
contexts they need to interact with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For DDD teams, and for software teams in general, the important thing should
be not that the domain is documented, it is that it is &lt;em&gt;understood&lt;/em&gt;, and that
this understanding is shared among everyone connected with developing the
software. Good documentation engenders a shared understanding of the business
domain. Good documentation for a DDD team captures the essence of the
reasoning around the domain model: a rich, expressive software model that
enables significant business capabilities in the core domain, supporting the
strategic goals of the business. Teams doing DDD accomplish this by
simplifying domain complexity enough to provide a shared language and
understanding, and embedding it in the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DDD is not prescriptive about documentation. What documents are produced
usually has more to do with the team&amp;#8217;s existing process than doing DDD.
However, there are certain kinds of documentation that teams doing DDD do find
very helpful. Let&amp;#8217;s look at some of these.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;requirements-specification&quot;&gt;Requirements Specification?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many teams opt for user stories as items in a feature queue, prioritized by value to the business
(i.e. &quot;Product Backlog&quot;, in Scrum terms). See my earlier blog post on &lt;a href=&quot;http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/&quot;&gt;user stories and DDD&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A team doing DDD could use a requirements specification document. But the trap with heavyweight, detailed specification documents is that they tend to &lt;a href=&quot;http://www.leanessays.com/2011/08/dont-separate-design-from.html&quot;&gt;separate design from implementation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Don&amp;#8217;t Separate Design from Implementation&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The theme running through all of my experience is that the long list of
things we have come to call requirements – and the large backlog of things we
have come to call stories – are actually the design of the system. Even a
list of features and functions is design. And in my experience, design is the
responsibility of the technical team developing the system.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suggest we might get better results if we skip writing lists of
requirements and building backlogs of stories. Instead, expect the
experienced designers, architects, and engineers on the development team to
design the system against a set of high-level goals and constraints – with
input from and review by business analysts and product managers, as well as
users, maintainers, and other stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile teams tend to eschew producing detailed requirements specifications,
preferring a more light-weight approach to describing what the system needs to
do. The problem with such documents is that design decisions are made too
early, with insufficient domain and technical knowledge, and having it written
up in a specification tends to set that ignorance in concrete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All too often, detailed requirements lists and backlogs of stories are
actually bad system design done by amateurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The risk in this approach is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating design from implementation amounts to outsourcing the
responsibility for the suitability of the resulting system to people outside
the development team. The team members are then in a position of simply doing
what they are told to do, rather than being full partners collaborating to
create great solutions to problems that they care about.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Mary Poppendieck
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most teams I coach are following some form of agile process (Scrum, XP etc)
and thus tend to focus more on rapid feedback loops and incremental
development over producing copious amounts of documentation first. This tends
to aid with modeling, as the documentation is produced as-needed, rather than
to get through some &quot;gate&quot; in a prescribed SDLC process. The code itself is
the design, paraphrasing Jack Reeves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some teams find it helpful to develop a list of use cases, a list of tasks the
program is able to perform or some combination of both. I would experiment
with what you find most useful for your team. Use cases have fallen out of
vogue recently, but I am still a big fan of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that I am not against specifying requirements in written form, but rather entombing those requirements (i.e. what features the system should provide to meet the customer&amp;#8217;s needs) in a large tome that locks-in the details of how the system should behave. I have utilized use cases in a lightweight, just-in-time way and found them very useful. See Alistair Cockburn&amp;#8217;s article on &lt;a href=&quot;http://alistair.cockburn.us/Why+I+still+use+use+cases&quot;&gt;Why I still use use cases&lt;/a&gt; for similar reasons to mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would also strongly recommend using mockups and prototypes as much as
possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core-elements&quot;&gt;Core Elements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I typically create a short document that captures the core domain vision
statement and the context map.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture is largely orthogonal, but supportive, for DDD. I find the &lt;a href=&quot;http://en.wikipedia.org/wiki/4%2B1_architectural_view_model&quot;&gt;4+1 architecture&lt;/a&gt; to be the most useful. It is useful to keep in mind that, as Grady Booch declared in 2009, architecture is a &lt;em&gt;shared hallucination&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture is just a collective hunch, a shared hallucination, an assertion by a set of stakeholders on the nature of their observable world, be it a world that is or a world as they wish it to be. Architecture therefore serves as a means of anchoring an extended set of stakeholders to a common vision of that world, a vision around which they may rally, to which they are led, and for which they work collectively to make manifest.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Grady Booch
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that in Krutchen&amp;#8217;s approach, scenarios are the unifying thing.
Reference scenarios are a more specific form of this. See &lt;a href=&quot;http://skillsmatter.com/podcast/design-architecture/paulrayner-domain-scenarios&quot;&gt;my presentation on
domain scenarios at the DDD Exchange 2012&lt;/a&gt; for a walkthrough of using reference
scenarios. In DDD &lt;em&gt;reference&lt;/em&gt; scenarios describe the &lt;em&gt;key business problems
that the model needs to solve&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reference scenarios will be the core domain business capabilities that the
software, and in particular, the domain model, will enable. They often take
the form of a short narrative, with a supporting diagram. Not starting out
that way, but the key is capture the significant details that make the problem
worth solving for the business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;George Fairbanks book, &lt;a href=&quot;http://www.amazon.com/Just-Enough-Software-Architecture-Risk-Driven/dp/0984618104/&quot;&gt;Just-Enough Software Architecture&lt;/a&gt; is the best book I&amp;#8217;ve found on characterizing, describing and documenting software archtictures. I love the pragmatic, risk-driven approach to architecture that this book takes (the sections on modeling alone are excellent, though it defines DDD too narrowly for my taste). If you are looking for something more comprehensive in the software engineering tradition, then it&amp;#8217;s hard to beat the definitive tome: &lt;a href=&quot;http://www.amazon.com/Documenting-Software-Architectures-Views-Beyond/dp/0321552687&quot;&gt;Documenting Software Architectures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ubiquitous-language&quot;&gt;Ubiquitous language&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be helpful having a document that explains the Ubiquitous Language.
Many teams develop a dictionary of significant business terms early on, and
for a team with a business analyst this can be a very significant
contribution. However, the same caveats mentioned above relating to separating
design from implementation are particularly relevant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most software development processes I have encountered, a business analyst or product owner has been assigned the job of writing the requirements or stories or use cases which constitute the design of the system. Quite frankly, people in these roles often lack the training and experience to do good system design, to propose alternative designs and weigh their trade-offs, to examine implementation details and modify the design as the system is being developed.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So as with all the documents described here, the dictionary must be kept up to
date to be useful. Such a dictionary can be an important start, but it
shouldn&amp;#8217;t be the end. I like to see it developed into a document that has
diagrams showing important states of the model, and how the terminology of the
domain model is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As terms change over time, such a document can be a good place to explain why
these changes in language were made, since that kind of historical information
won&amp;#8217;t be obvious by looking at the code etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;informal-uml-diagrams&quot;&gt;Informal UML diagrams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am always sketching UML diagrams on whiteboards. It saddens me that many
teams don&amp;#8217;t see the value in this. I particularly find instance diagrams
particularly useful in walking through scenarios with domain experts. I find
that when the domain experts see the concrete, pertinent business data values
in the &quot;little boxes&quot; in the diagram, it really helps with  understanding what
the model is expressing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many times when I work with a team that has an existing model, one of the
first things I will have the developers do is walk me and the domain expert
through a reference scenario on the whiteboard, explaining how the model
supports solving the important business problem. This activity alone is often
enough to show strengths and weaknesses of the domain model. Instance diagrams
also really help with understanding aggregate boundaries, since aggregates are
runtime artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sequence diagrams can be very helpful for understanding the application flow
from the UI, API, or context boundary down to the domain model. And also in
understanding interactions between sagas, objects, domain services or
aggregates (such as via application services or other infrastucture
responsible for eventual consistency between aggregates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create electronic versions such I often use light-weight UML sketch tools
such as [Web Sequence Diagrams](&lt;a href=&quot;http://www.websequencediagrams.com&quot; class=&quot;bare&quot;&gt;http://www.websequencediagrams.com&lt;/a&gt;) and [yUML](&lt;a href=&quot;http://yuml.me&quot; class=&quot;bare&quot;&gt;http://yuml.me&lt;/a&gt;). I like
the way these tools produce diagrams that look hand-drawn, which lends them
towards being viewed as transient and gives the team permission to change
them. One of the problems with producing high-quality UML diagrams is that it
tends to communicate that they are &quot;done,&quot; and shouldn&amp;#8217;t be changed. That they
are finished.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;anything-else&quot;&gt;Anything else?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m a big fan BDD tool such as Cucumber to create living documentation for
the system, if the team has the skills and experience with such a tool. For
example, the following feature file helps support the ubiquitous language
supporting the underlying conceptual model represented in the domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m biased towards Cucumber as a tool because I like the separation of steps
in feature files and stepdefinitions encourages the separation of ubiquitous
language from the technical implementation. The business terminology goes in
the feature files, and should be refactored as the ubiquitous language is
refined over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am co-authoring the book &lt;em&gt;BDD with Cucumber&lt;/em&gt; for Pearson/Addison Wesley. The book will
cover doing BDD using Cucumber (Ruby), Cucumber-JVM and SpecFlow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But it&amp;#8217;s not the tool that&amp;#8217;s most important, the same thing could be done with
other acceptance testing frameworks such as Concordian, Fitnesse or Robot
Framework. There&amp;#8217;s an interesting discussion going on right now on the &lt;a href=&quot;http://tech.groups.yahoo.com/group/aa-ftt/message/1976&quot;&gt;Agile
Alliance Functional Testing Tools (AA-FTT) mailing list&lt;/a&gt; about these
frameworks and the various tradeoffs they provide. The important thing is the
improvements I see in communication and collaboration when teams use these
tools to refine acceptance criteria for user stories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;standalone-vs-combined-documents&quot;&gt;Standalone vs. Combined Documents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No preference for this. Most teams work this kind of thing out on their own
over time. I&amp;#8217;m not even sure what the factors are for deciding whether to
combine documents or not. My preference is to keep documents short and
focused. I find they are more likely to be read and used if they are concise
and cohesive - maybe principles of good software module design could be
pertinent in structuring documents too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My preference is for diagrams surrounded by text. If a picture is worth a 1000
words, supporting text that explains the critical aspects of the diagram is a
multiplier for this in terms of utility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;respect-your-audience&quot;&gt;Respect Your Audience&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, and most importantly, when writing any software documentation
consider your audience. Will the readers be coders? testers? domain experts?
all of the above? Is this technical documentation, or business-facing
documentation? How you answer these questions should factor strongly in terms
of what kinds of information you include in the document, particularly how
much technical detail you incorporate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s probably a lot of things I&amp;#8217;ve missed here. What has been your experience with doing DDD in terms of documentation?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 07 May 2013 11:40:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/05/07/succeeding-with-ddd-documentation/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/05/07/succeeding-with-ddd-documentation/</guid>
        
        <category>DDD</category>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>Agile User stories and Domain-Driven Design (DDD)</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Monday night at our DDD Denver meetup we ended up having a valuable and lively group discussion using a modified &lt;a href=&quot;http://systemagility.com/2012/04/16/enjoy-a-lean-coffee/&quot;&gt;Lean Coffee&lt;/a&gt;. The four questions we covered (in order) were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Where to start in developing a domain model?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the biggest hurdle for a team adopting DDD?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the intersection of DDD &amp;amp; agile user stories?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Techniques for implementing DDD across geographically dispersed teams&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we discussed the intersection of DDD and user stories, I mentioned a quick reference guide that I have used for my own coaching and training over the years. There seemed to be a lot of interest in having me share the resource more widely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I am now making my &quot;Stories for Design and Delivery&quot; reference freely and publicly available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This double-sided quick-reference provides a wealth of distilled content about how to integrate stories and design, including making decisions about splitting based on business subdomain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on either thumbnail below to download the full-size PDF version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;front&quot;&gt;Front&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock dropshadow&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.virtual-genius.com/resources/Stories-for-design-and-delivery.pdf&quot;&gt;&lt;img src=&quot;/assets/stories-for-design-and-delivery-thumbnail1.png&quot; alt=&quot;Stories for design and delivery - Front&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;back&quot;&gt;Back&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock dropshadow&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.virtual-genius.com/resources/Stories-for-design-and-delivery.pdf&quot;&gt;&lt;img src=&quot;/assets/stories-for-design-and-delivery-thumbnail2.png&quot; alt=&quot;Stories for design and delivery - Back&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I put the first version of the guide together back in 2009 as a quick reference guide for Mike Cohn&amp;#8217;s &lt;em&gt;User Stories Applied&lt;/em&gt;. I needed an easier way to get the whole team to understand user stories without forcing them all to read the book (as good as it is, this wasn&amp;#8217;t going to happen). I printed and laminated a bunch of copies and distributed them to the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iteration two was several years ago when Richard Lawrence published his excellent &lt;a href=&quot;http://www.richardlawrence.info/2009/10/28/patterns-for-splitting-user-stories/&quot;&gt;Patterns for Splitting User Stories post&lt;/a&gt; (also referenced as a footnote on the guide&amp;#8217;s second page). At that time I incorporated Richard&amp;#8217;s material into the second page, greatly improving the guidance around splitting stories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve used this guide many times over the years in my classes and coaching, teaching teams how to collaboratively and creatively decompose their functionality into manageable increments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iteration three was almost a year ago, when I decided to move away from the conventional agile community&amp;#8217;s terminology and emphasis on process, and focus on how stories can support design, rather than fragment it. I tried to approach it first and foremost as a DDD practitioner, concerned about putting design first. So I incorporated my current understanding of how domain modeling, tactical design practices and strategic design (i.e. mainly subdomain distillation) fits with how most teams manage their work items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Note: I&amp;#8217;ve deliberately defied convention by not calling them _user&lt;/em&gt; stories. Stories - as I conceive of them - may relate directly to customers, users, stakeholders and even predominantly technical considerations, not just end users. Some heavily design-focused stories, such as building an anti-corruption layer in front of a back-end system, might only be exposed to users tangentially via seemingly unrelated functionality (from their perspective)._&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just recently, Richard has reworked his story splitting guide into an excellent flow chart: &lt;a href=&quot;http://www.richardlawrence.info/2012/01/27/new-story-splitting-resource&quot;&gt;How to Split a User Story&lt;/a&gt;, which I highly recommend as a more process-focused complement to mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this is as helpful to others as it has been to me. Let me know in the comments if you do find this useful. And please let me know any ways I might improve the quick reference guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The document is designed to be printed double-sided. I recommend laminating your copies before you hand them out so they last longer and are less likely to get lost in a pile of paper.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 15 Feb 2013 21:14:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/15/agile-user-stories-and-domain-driven-design-ddd/</guid>
        
        <category>DDD</category>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>Word Document to Asciidoc Conversion</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had content in Word documents that I needed to convert to Asciidoc for our book. Here are the steps I found to work best:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Save Word doc as HTML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encode as UTF-8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use pandoc to convert from HTML to AsciiDoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Sublime Text 2 search and replace (using some regular expressions) to strip out crazy things&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Sublime Text 2 to perform any remaining formatting&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;save-word-doc-as-html&quot;&gt;Save Word doc as HTML&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the document in Word, and then save as a web page. &lt;em&gt;Select the &quot;Save only Display Information into HTML&quot; option when saving.&lt;/em&gt; Exit from Word (and wave it goodbye as you do!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;encode-as-utf-8&quot;&gt;Encode as UTF-8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the html file in Sublime Text 2. Avert your eyes at the horror that is Word-formatted HTML. Reopen with encoding UTF-8 and save the file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/sublime-text-utf8.png&quot; alt=&quot;Sublime Text 2 Reopen with Encoding&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I don&amp;#8217;t recode as UTF-8, then the next step will fail with the error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;pandoc: Cannot decode byte &#39;\x6f&#39;: Data.Text.Encoding.decodeUtf8: Invalid UTF-8 stream&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-pandoc-to-convert-from-html-to-asciidoc&quot;&gt;Use Pandoc to convert from HTML to AsciiDoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt;. For example, the following command takes &lt;code&gt;ConventionSheet.htm&lt;/code&gt; and converts it to the AsciiDoc file &lt;code&gt;file.asc&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;pandoc -f html -t asciidoc -o file.asc ConventionSheet.htm&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-sublime-text-2-search-and-replace-using-some-regular-expressions-to-strip-out-crazy-things&quot;&gt;Use Sublime Text 2 search and replace (using some regular expressions) to strip out crazy things&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weird single quotes need to go:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/sublime-text-backtick-replace.png&quot; alt=&quot;Sublime Text 2 Replace backtick with single quote&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you had reviewing turned on in Word, then reviewer comments and changes will likely be present in the HTML. Remove these using a search and replace with the following Regex in the search field:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;\[line-through\]\*(.+)\*&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When matched lines cross line breaks then you can use the single line option (&lt;code&gt;?s&lt;/code&gt;) in your regex for search and replace:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(?s)\[line-through\]\*.(.*?)\*&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-sublime-text-2-to-perform-any-remaining-asciidoc-formatting&quot;&gt;Use Sublime Text 2 to perform any remaining AsciiDoc formatting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monospace any regex or other special characters (these will cause problems for the AsciiDoc parser) in the document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Edit the AsciiDoc document as you wish! Note that GitHub now natively displays AsciiDoc files (using &lt;a href=&quot;http://asciidoctor.org/news/asciidoctor-announcement.html&quot;&gt;AsciiDoctor&lt;/a&gt; behind the scenes), just as it does for Markdown.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 14 Feb 2013 15:35:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/14/word-to-asciidoc/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/14/word-to-asciidoc/</guid>
        
        <category>Writing</category>
        
        <category>Tools</category>
        
        <category>Productivity</category>
        
        <category>AsciiDoc</category>
        
        
      </item>
    
      <item>
        <title>Colors when viewing folders in Terminal</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Saw directory listing coloring at Golden Ruby Users Group this week, and needed to have it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://linux-sxs.org/housekeeping/lscolors.html&quot;&gt;LsColors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;LS_COLORS=&#39;di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35:*.rpm=90&#39;
export LS_COLORS&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://norbauer.com/notebooks/code/notes/ls-colors-and-terminal-app&quot;&gt;ls, colors and Terminal.app&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Customize Your Colors&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The values in LSCOLORS are codes corresponding to different colors for different types of files. The letter you use indicates which color to use, and the position in the string indicates what type of file should be that color. Each color comes in pairs – a foreground color and a background color. Here is a list of color values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a = black&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b = red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c = green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d = brown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e = blue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f = magenta&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g = cyan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;h = grey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A = dark grey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B = bold red&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C = bold green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D = yellow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E = bold blue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;F = magenta&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G = cyan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;H = white&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x = default&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here is a list of the positions in LSCOLORS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;symbolic link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;socket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pipe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;block device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;character device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable with setuid set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executable with setguid set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;directory writable by others, with sticky bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;directory writable by others, without sticky bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/&quot;&gt;Colors for Dark Terminal Themes&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 07 Feb 2013 15:33:00 +0000</pubDate>
        <link>http://thepaulrayner.com/blog/2013/02/07/colors-when-viewing-folders-in-terminal/</link>
        <guid isPermaLink="true">http://thepaulrayner.com/blog/2013/02/07/colors-when-viewing-folders-in-terminal/</guid>
        
        <category>Coding</category>
        
        <category>Productivity</category>
        
        
      </item>
    
  </channel>
</rss>
